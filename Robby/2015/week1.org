* Startup
  #+NAME: startup
  #+begin_src emacs-lisp :results silent
  (setq org-babel-python-command "~/anaconda3/envs/aoc/bin/python" org-src-tab-acts-natively nil)
  #+END_SRC
* day1
** init_day1
   #+name: init_day1
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/1/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[f0f9e94f651d012376ee32d0249a8537d95fc281]: init_day1
   : (((())))()((((((((())()(()))(()((((()(()(((()((()((()(()()()()()))(((()(()((((((((((())(()()((())()(((())))()(()(()((()(()))(()()()()((()((()(((()()(((((((()()())()((((()()(((((()(())()(())((())()()))()(((((((())(()())(()(((())(()))((())))(()((()())))()())((((())))(()(((((()(())(((()()((()((()((((((((((())(()())))))()))())()()((((()()()()()()((((((())())(((()())()((()()(((()()()))(((((()))(((()(()()()(()(()(((())()))(()(((()((())()(()())())))((()()()(()()(((()))(((()((((()(((((()()(()())((()())())(()((((((()(()()))((((()))))())((())()()((()(()))))((((((((()))(()()(((())())(())()((()()()()((()((()((()()(((())))(()((())()((((((((()((()(()()(((())())())))(())())))()((((()))))))())))()()))()())((()())()((()()()))(()()(((()(())((((())())((((((((()()()()())))()()()((((()()))))))()((((()(((()))(()()())))((()()(((()))()()())())(((())((()()(())()()()(((())))))()())((()))()))((())()()())()())()()(()))())))())()))(())((()(())))(()(())(()))))(()(())())(()(())(()(()))))((()())()))()((((()()))))())))()()())((())()((()()()))()(((()(()))))(())()()))(((()())))))))))(((())))()))())()))))()()(((())))))))()(()()(()))((()))))((())))((()((())))())))()()(()))())()(()((()())(()(()()())())(()()))()))))(()())()()))()()()()))(()(()(()))))))()(()))()))()()(()((())(()(())))()(((())(())())))))()(()(()))))()))(()()()(())()(()(())))()))))()()(((((())))))())()())())())()())()))))()))))))))())()()()()()()())))()))((())()))())))()((())()))))()))())))))))())()()()))()()(()((((()(((((((()(())((()())((()()))()))))(())))()()()(())((())()())))(())))(())))(((()()))()(())(((()(()))((())))())()))((((()))())()))))))))()(())())))(()))()(()()))())()()(())())))())()()(()())))()((()())(()(())(())))))))))))))(()))))()))))))()()())(()(((((()(()())))())()))(()))()))(()()))()())(()))())()(())((()()))))))())))())()(((())))(()(()))()()))()(()))))))((()())(()))))))()())))()()))))))))((((((((()()()(()))))))()())))())))()()((())()))((())(())))())())))()()()((()((()(())))())()(())))))))))()())))()()()()()()))()))((())())(()(()))))))(()()))()))(())))()))))))))))))(()))))))))()))))()))()())()))()()))))))()))))((()))))(()))())()(())))(()())((((()())))()))))(()))()(()()(())))))())))))()))))))())))())))))())))())())))())(()))))(())()(())))())()))((()()))))))())))((())))))))())))(())))))()()())))))())))))()))))))()))()()()(()(((()())())())(()))())))))((()(())(()))))))))(())))()()()())())(()))))()()()))()))())())())()(())))()(((()((((())))))))()))))))))))))))))))))((())()())(()))))()()))))))(()()(())())))())))((())))((())))))))))))))()))))()(()))))))())))))()))(()()())(()())))))))))()))))))(())))))()()))()())(((())))()))(()))))))))(())())))())))())())())()()))((())()(())()())()))()())(())(()))))()())))(()(((()))))))()(()())()()()))()))))))))()()()(())()())()(((((()))()())())(()))))()()()(())))())))()((()())))(()))())()(()())())(()))()()))((()()))((()()()()())))(())()))(()(())))((()()))))))))())))))))())()()))))))))))))))))(())()(())(())()())())()))()(()))))())())))))()())()(()))()()(())))(())())))))(()))))))))))))))())())(())(())))(((()))()))))())((())(()))())))))))())))))())))()))()))))))))))))())()))))()))))((()))(())))()(())))(())()))()))())))())))))))()(()())())))()()())))(())))))(()))))))))))))(()))()))()))())))(((()()()(())((()())))()())(((()))(())()))((()()()())))())(())(()))))()(((((())))(()))())())))))))((((()()()))())())()(()(()())))))))))()())())))(())))()())(((()(())())()()))())())))))))((()())((()()(()))(()(())))()))()))(()))(()))()()(()(((())((((()))()(()))((())()(()(()())()(()))()())))))(()))()))())()())))())))(())))((())(()())))))()))(())(()))()())()(()()((()(()))))))()(())(()())(())()))(((())()))(()()(()()()))))(()(())))()))))())))))())(()()()()()()(((())))(()()))()((())(((((()()())))(()))(()))()()))(((())())()(((()()()()))))(()))(())())))()())(()()())())))))))()))))((())))()())(()))(()(()))())))))())(())))))()()())())()))()()(())))(()))(())((((((())(()))(()))())()))(()()(())))()))(()()))()))()(())))(())))((()(()))(())()()())())))(((()()())(())()))))))()(((()(((((()()(((())(())))())()((()))))((()())()(())(((())))(((()((()(()(()))(()()))())(()))(())(())))()))))))((((()))()((((()(()))()))()()))))()(()(()))()(()((()(((()(()()(((()))))()(((()(()(()(((()(()())())()()(()(()())())(()((((())(()))()))(((((()()())(())()((()()())))()()(((()()))()((((((((()(())))())((()))))(())))(()))))((()((((()()(())(((((()))(((((((((((((()())))((((()(((()((())())()))((()))()(()()((()()()()(()()(()(()(((())()(()((((((()((()()((())()((((()((()()(()()())((()()()((()((())()(()(((()((())((((())(()))((()(()))(()())()((((((((()(((((((((((()))(()(((()(()()()((((())((())()())()))(())((())(()))(((()((()(())))(()))))((()()))))((((()(()(()())(()(())((((((((()((((()((()(((((()))())()(()))(()()((()(())(((((()(())()(((((()()))))))()(((())()(()()((((())()((())((()(((())(((()))((()()((((()(())))))((()((((()((()((()(((())((()))(((((((()(((()((((((((())()))((((())(((((()((((((((()(((()((()(((()()(((()((((((()()(()((((((((()()(()(()(())((((()())()))))(((()))((((())((((()())((()(())()((()((((((()((((((()(())))()())(((())())())()(())()(()())((()()((((())((((((())(()(((((()((((())()((((()(()(())(()())(((())()((())((((()))()((((((())(()(((()(((()((((((()(((()))(()()())())((()((()())()((((())(((()(()(((((((((())(())))()((()()()()(())((()))(((((((()(((((((((()(()))))(()((((((((()((((()((()()((((((()()(((((((()(()(())()(())((()()()((()(((((()())()(((((()())()()((()(()())(()()()(((()()(((((()((((((()()((()(()()()((((((((((((()((((((((()()(((()())))()(((()()(())())((((()((((()((((()()()(())(())((()(()(((((((((((((((()(())(())))))()()))((()(((()(())((()(((()(()()((((()()(((()(((()(((((()()((()(()(((()))((((((()((((((((()((()((())(((((()(((())(())())((()()))((((())()()((()(((()(((((()()(((()))(((()(()(((((((((((((()))((((((((()(((()))))())((((((((((((())((())((()())(((())((())(()((((((((((()(((())((()()(()((())(((((((((((()))((((((((((((()(()())((()((()((()(()(((()((((((((()()(()((()(()(((()))((()))(((((((((((((()(())((((((())(((()(())(()(()(()((()()))((((()((((()((((())))())((((()((((()))((((((()((((((()((()(((())))((())(()))(()((()((((()((()(((()()))((((()()()(((((((())(((())(()))())((((()())(((()(((((((((((()(()(()((()(((((((((((((((()()((((()((((((((()(((()()((()((((()))(((()(())((((((()((((())()((((()((()))(())()(()(((()((())())((((((()(()(())())(((())(()(()())(((((()((()((())()())(())))(((()(())))))))(((()(((()))()((()(((()()((()())()()))())))(((()))(()(((()(((((((((()(()(((((()()(((()())()()))))()(((()))(((()(()(()(()(()))()(())()))(()(((())))(()))))))))))(())((()((())((()(())()(())((()()((((()()((()()))((())(((()((()(())(())))()(()(((((()((()))())()(((((()()(((()(()((((((())(()))(())()))((()(()()))(())())()))(((())))(()((()(((())(())())))((()()((((((((((((((()((()(()()(()(((()))())()()((()()()(())(()))(()())(((())((())()(())()()(()()(())))((()(((()))))(((()()(()()))())((()((())()))((((()()()())((())))(((()(())(((((()(((((()((()(()((((()()(((()()()(((()())(((()()((((())(()))(((()))(())())((()))(((()((()))(((()()((())((()(((((()((((()()())((()))()((((()((()(()()()(

** day1-common (test)
   #+name: test_set
   #+begin_src python :results value :cache yes
   #
   data="(())"
   return data
   #+end_src

   #+name: day1-com
   #+begin_src python :results output :var data=test_set
     floor = 0
     ii = 0
     for s in data:
         ii += 1
         if s == '(':
             floor += 1
         elif s == ')':
             floor -= 1
         if floor < 0:
             print(ii)
     print(floor)
   #+end_src

   #+RESULTS: day1-com
   : None

** day1a
   #+name: day1a
   #+begin_src python :results output :var data=init_day1 :noweb yes
   <<day1-com>>
   #+end_src

   #+RESULTS: day1a
   : 232

** day1b
   #+name: day1b
   #+begin_src python :results output :var data=init_day1 :noweb yes
   <<day1-com>>
   #+end_src

   #+RESULTS: day1b
   #+begin_example
   1783
   1785
   1786
   1787
   1788
   1789
   1790
   1791
   1792
   1793
   1794
   1795
   1796
   1797
   1798
   1799
   1800
   1801
   1802
   1803
   1804
   1805
   1806
   1807
   1808
   1809
   1810
   1811
   1812
   1813
   1814
   1815
   1816
   1817
   1818
   1819
   1820
   1821
   1822
   1823
   1824
   1825
   1826
   1827
   1828
   1829
   1830
   1831
   1832
   1833
   1834
   1835
   1836
   1837
   1838
   1839
   1840
   1841
   1842
   1843
   1844
   1845
   1846
   1847
   1848
   1849
   1850
   1851
   1852
   1853
   1854
   1855
   1856
   1857
   1858
   1859
   1860
   1861
   1862
   1863
   1864
   1865
   1866
   1867
   1868
   1869
   1870
   1871
   1872
   1873
   1874
   1875
   1876
   1877
   1878
   1879
   1880
   1881
   1882
   1883
   1884
   1885
   1886
   1887
   1888
   1889
   1890
   1891
   1892
   1893
   1894
   1895
   1896
   1897
   1898
   1899
   1900
   1901
   1902
   1903
   1904
   1905
   1906
   1907
   1908
   1909
   1910
   1911
   1912
   1913
   1914
   1915
   1916
   1917
   1918
   1919
   1920
   1921
   1922
   1923
   1924
   1925
   1926
   1927
   1928
   1929
   1930
   1931
   1932
   1933
   1934
   1935
   1936
   1937
   1938
   1939
   1940
   1941
   1942
   1943
   1944
   1945
   1946
   1947
   1948
   1949
   1950
   1951
   1952
   1953
   1954
   1955
   1956
   1957
   1958
   1959
   1960
   1961
   1962
   1963
   1964
   1965
   1966
   1967
   1968
   1969
   1970
   1971
   1972
   1973
   1974
   1975
   1976
   1977
   1978
   1979
   1980
   1981
   1982
   1983
   1984
   1985
   1986
   1987
   1988
   1989
   1990
   1991
   1992
   1993
   1994
   1995
   1996
   1997
   1998
   1999
   2000
   2001
   2002
   2003
   2004
   2005
   2006
   2007
   2008
   2009
   2010
   2011
   2012
   2013
   2014
   2015
   2016
   2017
   2018
   2019
   2020
   2021
   2022
   2023
   2024
   2025
   2026
   2027
   2028
   2029
   2030
   2031
   2032
   2033
   2034
   2035
   2036
   2037
   2038
   2039
   2040
   2041
   2042
   2043
   2044
   2045
   2046
   2047
   2048
   2049
   2050
   2051
   2052
   2053
   2054
   2055
   2056
   2057
   2058
   2059
   2060
   2061
   2062
   2063
   2064
   2065
   2066
   2067
   2068
   2069
   2070
   2071
   2072
   2073
   2074
   2075
   2076
   2077
   2078
   2079
   2080
   2081
   2082
   2083
   2084
   2085
   2086
   2087
   2088
   2089
   2090
   2091
   2092
   2093
   2094
   2095
   2096
   2097
   2098
   2099
   2100
   2101
   2102
   2103
   2104
   2105
   2106
   2107
   2108
   2109
   2110
   2111
   2112
   2113
   2114
   2115
   2116
   2117
   2118
   2119
   2120
   2121
   2122
   2123
   2124
   2125
   2126
   2127
   2128
   2129
   2130
   2131
   2132
   2133
   2134
   2135
   2136
   2137
   2138
   2139
   2140
   2141
   2142
   2143
   2144
   2145
   2146
   2147
   2148
   2149
   2150
   2151
   2152
   2153
   2154
   2155
   2156
   2157
   2158
   2159
   2160
   2161
   2162
   2163
   2164
   2165
   2166
   2167
   2168
   2169
   2170
   2171
   2172
   2173
   2174
   2175
   2176
   2177
   2178
   2179
   2180
   2181
   2182
   2183
   2184
   2185
   2186
   2187
   2188
   2189
   2190
   2191
   2192
   2193
   2194
   2195
   2196
   2197
   2198
   2199
   2200
   2201
   2202
   2203
   2204
   2205
   2206
   2207
   2208
   2209
   2210
   2211
   2212
   2213
   2214
   2215
   2216
   2217
   2218
   2219
   2220
   2221
   2222
   2223
   2224
   2225
   2226
   2227
   2228
   2229
   2230
   2231
   2232
   2233
   2234
   2235
   2236
   2237
   2238
   2239
   2240
   2241
   2242
   2243
   2244
   2245
   2246
   2247
   2248
   2249
   2250
   2251
   2252
   2253
   2254
   2255
   2256
   2257
   2258
   2259
   2260
   2261
   2262
   2263
   2264
   2265
   2266
   2267
   2268
   2269
   2270
   2271
   2272
   2273
   2274
   2275
   2276
   2277
   2278
   2279
   2280
   2281
   2282
   2283
   2284
   2285
   2286
   2287
   2288
   2289
   2290
   2291
   2292
   2293
   2294
   2295
   2296
   2297
   2298
   2299
   2300
   2301
   2302
   2303
   2304
   2305
   2306
   2307
   2308
   2309
   2310
   2311
   2312
   2313
   2314
   2315
   2316
   2317
   2318
   2319
   2320
   2321
   2322
   2323
   2324
   2325
   2326
   2327
   2328
   2329
   2330
   2331
   2332
   2333
   2334
   2335
   2336
   2337
   2338
   2339
   2340
   2341
   2342
   2343
   2344
   2345
   2346
   2347
   2348
   2349
   2350
   2351
   2352
   2353
   2354
   2355
   2356
   2357
   2358
   2359
   2360
   2361
   2362
   2363
   2364
   2365
   2366
   2367
   2368
   2369
   2370
   2371
   2372
   2373
   2374
   2375
   2376
   2377
   2378
   2379
   2380
   2381
   2382
   2383
   2384
   2385
   2386
   2387
   2388
   2389
   2390
   2391
   2392
   2393
   2394
   2395
   2396
   2397
   2398
   2399
   2400
   2401
   2402
   2403
   2404
   2405
   2406
   2407
   2408
   2409
   2410
   2411
   2412
   2413
   2414
   2415
   2416
   2417
   2418
   2419
   2420
   2421
   2422
   2423
   2424
   2425
   2426
   2427
   2428
   2429
   2430
   2431
   2432
   2433
   2434
   2435
   2436
   2437
   2438
   2439
   2440
   2441
   2442
   2443
   2444
   2445
   2446
   2447
   2448
   2449
   2450
   2451
   2452
   2453
   2454
   2455
   2456
   2457
   2458
   2459
   2460
   2461
   2462
   2463
   2464
   2465
   2466
   2467
   2468
   2469
   2470
   2471
   2472
   2473
   2474
   2475
   2476
   2477
   2478
   2479
   2480
   2481
   2482
   2483
   2484
   2485
   2486
   2487
   2488
   2489
   2490
   2491
   2492
   2493
   2494
   2495
   2496
   2497
   2498
   2499
   2500
   2501
   2502
   2503
   2504
   2505
   2506
   2507
   2508
   2509
   2510
   2511
   2512
   2513
   2514
   2515
   2516
   2517
   2518
   2519
   2520
   2521
   2522
   2523
   2524
   2525
   2526
   2527
   2528
   2529
   2530
   2531
   2532
   2533
   2534
   2535
   2536
   2537
   2538
   2539
   2540
   2541
   2542
   2543
   2544
   2545
   2546
   2547
   2548
   2549
   2550
   2551
   2552
   2553
   2554
   2555
   2556
   2557
   2558
   2559
   2560
   2561
   2562
   2563
   2564
   2565
   2566
   2567
   2568
   2569
   2570
   2571
   2572
   2573
   2574
   2575
   2576
   2577
   2578
   2579
   2580
   2581
   2582
   2583
   2584
   2585
   2586
   2587
   2588
   2589
   2590
   2591
   2592
   2593
   2594
   2595
   2596
   2597
   2598
   2599
   2600
   2601
   2602
   2603
   2604
   2605
   2606
   2607
   2608
   2609
   2610
   2611
   2612
   2613
   2614
   2615
   2616
   2617
   2618
   2619
   2620
   2621
   2622
   2623
   2624
   2625
   2626
   2627
   2628
   2629
   2630
   2631
   2632
   2633
   2634
   2635
   2636
   2637
   2638
   2639
   2640
   2641
   2642
   2643
   2644
   2645
   2646
   2647
   2648
   2649
   2650
   2651
   2652
   2653
   2654
   2655
   2656
   2657
   2658
   2659
   2660
   2661
   2662
   2663
   2664
   2665
   2666
   2667
   2668
   2669
   2670
   2671
   2672
   2673
   2674
   2675
   2676
   2677
   2678
   2679
   2680
   2681
   2682
   2683
   2684
   2685
   2686
   2687
   2688
   2689
   2690
   2691
   2692
   2693
   2694
   2695
   2696
   2697
   2698
   2699
   2700
   2701
   2702
   2703
   2704
   2705
   2706
   2707
   2708
   2709
   2710
   2711
   2712
   2713
   2714
   2715
   2716
   2717
   2718
   2719
   2720
   2721
   2722
   2723
   2724
   2725
   2726
   2727
   2728
   2729
   2730
   2731
   2732
   2733
   2734
   2735
   2736
   2737
   2738
   2739
   2740
   2741
   2742
   2743
   2744
   2745
   2746
   2747
   2748
   2749
   2750
   2751
   2752
   2753
   2754
   2755
   2756
   2757
   2758
   2759
   2760
   2761
   2762
   2763
   2764
   2765
   2766
   2767
   2768
   2769
   2770
   2771
   2772
   2773
   2774
   2775
   2776
   2777
   2778
   2779
   2780
   2781
   2782
   2783
   2784
   2785
   2786
   2787
   2788
   2789
   2790
   2791
   2792
   2793
   2794
   2795
   2796
   2797
   2798
   2799
   2800
   2801
   2802
   2803
   2804
   2805
   2806
   2807
   2808
   2809
   2810
   2811
   2812
   2813
   2814
   2815
   2816
   2817
   2818
   2819
   2820
   2821
   2822
   2823
   2824
   2825
   2826
   2827
   2828
   2829
   2830
   2831
   2832
   2833
   2834
   2835
   2836
   2837
   2838
   2839
   2840
   2841
   2842
   2843
   2844
   2845
   2846
   2847
   2848
   2849
   2850
   2851
   2852
   2853
   2854
   2855
   2856
   2857
   2858
   2859
   2860
   2861
   2862
   2863
   2864
   2865
   2866
   2867
   2868
   2869
   2870
   2871
   2872
   2873
   2874
   2875
   2876
   2877
   2878
   2879
   2880
   2881
   2882
   2883
   2884
   2885
   2886
   2887
   2888
   2889
   2890
   2891
   2892
   2893
   2894
   2895
   2896
   2897
   2898
   2899
   2900
   2901
   2902
   2903
   2904
   2905
   2906
   2907
   2908
   2909
   2910
   2911
   2912
   2913
   2914
   2915
   2916
   2917
   2918
   2919
   2920
   2921
   2922
   2923
   2924
   2925
   2926
   2927
   2928
   2929
   2930
   2931
   2932
   2933
   2934
   2935
   2936
   2937
   2938
   2939
   2940
   2941
   2942
   2943
   2944
   2945
   2946
   2947
   2948
   2949
   2950
   2951
   2952
   2953
   2954
   2955
   2956
   2957
   2958
   2959
   2960
   2961
   2962
   2963
   2964
   2965
   2966
   2967
   2968
   2969
   2970
   2971
   2972
   2973
   2974
   2975
   2976
   2977
   2978
   2979
   2980
   2981
   2982
   2983
   2984
   2985
   2986
   2987
   2988
   2989
   2990
   2991
   2992
   2993
   2994
   2995
   2996
   2997
   2998
   2999
   3000
   3001
   3002
   3003
   3004
   3005
   3006
   3007
   3008
   3009
   3010
   3011
   3012
   3013
   3014
   3015
   3016
   3017
   3018
   3019
   3020
   3021
   3022
   3023
   3024
   3025
   3026
   3027
   3028
   3029
   3030
   3031
   3032
   3033
   3034
   3035
   3036
   3037
   3038
   3039
   3040
   3041
   3042
   3043
   3044
   3045
   3046
   3047
   3048
   3049
   3050
   3051
   3052
   3053
   3054
   3055
   3056
   3057
   3058
   3059
   3060
   3061
   3062
   3063
   3064
   3065
   3066
   3067
   3068
   3069
   3070
   3071
   3072
   3073
   3074
   3075
   3076
   3077
   3078
   3079
   3080
   3081
   3082
   3083
   3084
   3085
   3086
   3087
   3088
   3089
   3090
   3091
   3092
   3093
   3094
   3095
   3096
   3097
   3098
   3099
   3100
   3101
   3102
   3103
   3104
   3105
   3106
   3107
   3108
   3109
   3110
   3111
   3112
   3113
   3114
   3115
   3116
   3117
   3118
   3119
   3120
   3121
   3122
   3123
   3124
   3125
   3126
   3127
   3128
   3129
   3130
   3131
   3132
   3133
   3134
   3135
   3136
   3137
   3138
   3139
   3140
   3141
   3142
   3143
   3144
   3145
   3146
   3147
   3148
   3149
   3150
   3151
   3152
   3153
   3154
   3155
   3156
   3157
   3158
   3159
   3160
   3161
   3162
   3163
   3164
   3165
   3166
   3167
   3168
   3169
   3170
   3171
   3172
   3173
   3174
   3175
   3176
   3177
   3178
   3179
   3180
   3181
   3182
   3183
   3184
   3185
   3186
   3187
   3188
   3189
   3190
   3191
   3192
   3193
   3194
   3195
   3196
   3197
   3198
   3199
   3200
   3201
   3202
   3203
   3204
   3205
   3206
   3207
   3208
   3209
   3210
   3211
   3212
   3213
   3214
   3215
   3216
   3217
   3218
   3219
   3220
   3221
   3222
   3223
   3224
   3225
   3226
   3227
   3228
   3229
   3230
   3231
   3232
   3233
   3234
   3235
   3236
   3237
   3238
   3239
   3240
   3241
   3242
   3243
   3244
   3245
   3246
   3247
   3248
   3249
   3250
   3251
   3252
   3253
   3254
   3255
   3256
   3257
   3258
   3259
   3260
   3261
   3262
   3263
   3264
   3265
   3266
   3267
   3268
   3269
   3270
   3271
   3272
   3273
   3274
   3275
   3276
   3277
   3278
   3279
   3280
   3281
   3282
   3283
   3284
   3285
   3286
   3287
   3288
   3289
   3290
   3291
   3292
   3293
   3294
   3295
   3296
   3297
   3298
   3299
   3300
   3301
   3302
   3303
   3304
   3305
   3306
   3307
   3308
   3309
   3310
   3311
   3312
   3313
   3314
   3315
   3316
   3317
   3318
   3319
   3320
   3321
   3322
   3323
   3324
   3325
   3326
   3327
   3328
   3329
   3330
   3331
   3332
   3333
   3334
   3335
   3336
   3337
   3338
   3339
   3340
   3341
   3342
   3343
   3344
   3345
   3346
   3347
   3348
   3349
   3350
   3351
   3352
   3353
   3354
   3355
   3356
   3357
   3358
   3359
   3360
   3361
   3362
   3363
   3364
   3365
   3366
   3367
   3368
   3369
   3370
   3371
   3372
   3373
   3374
   3375
   3376
   3377
   3378
   3379
   3380
   3381
   3382
   3383
   3384
   3385
   3386
   3387
   3388
   3389
   3390
   3391
   3392
   3393
   3394
   3395
   3396
   3397
   3398
   3399
   3400
   3401
   3402
   3403
   3404
   3405
   3406
   3407
   3408
   3409
   3410
   3411
   3412
   3413
   3414
   3415
   3416
   3417
   3418
   3419
   3420
   3421
   3422
   3423
   3424
   3425
   3426
   3427
   3428
   3429
   3430
   3431
   3432
   3433
   3434
   3435
   3436
   3437
   3438
   3439
   3440
   3441
   3442
   3443
   3444
   3445
   3446
   3447
   3448
   3449
   3450
   3451
   3452
   3453
   3454
   3455
   3456
   3457
   3458
   3459
   3460
   3461
   3462
   3463
   3464
   3465
   3466
   3467
   3468
   3469
   3470
   3471
   3472
   3473
   3474
   3475
   3476
   3477
   3478
   3479
   3480
   3481
   3482
   3483
   3484
   3485
   3486
   3487
   3488
   3489
   3490
   3491
   3492
   3493
   3494
   3495
   3496
   3497
   3498
   3499
   3500
   3501
   3502
   3503
   3504
   3505
   3506
   3507
   3508
   3509
   3510
   3511
   3512
   3513
   3514
   3515
   3516
   3517
   3518
   3519
   3520
   3521
   3522
   3523
   3524
   3525
   3526
   3527
   3528
   3529
   3530
   3531
   3532
   3533
   3534
   3535
   3536
   3537
   3538
   3539
   3540
   3541
   3542
   3543
   3544
   3545
   3546
   3547
   3548
   3549
   3550
   3551
   3552
   3553
   3554
   3555
   3556
   3557
   3558
   3559
   3560
   3561
   3562
   3563
   3564
   3565
   3566
   3567
   3568
   3569
   3570
   3571
   3572
   3573
   3574
   3575
   3576
   3577
   3578
   3579
   3580
   3581
   3582
   3583
   3584
   3585
   3586
   3587
   3588
   3589
   3590
   3591
   3592
   3593
   3594
   3595
   3596
   3597
   3598
   3599
   3600
   3601
   3602
   3603
   3604
   3605
   3606
   3607
   3608
   3609
   3610
   3611
   3612
   3613
   3614
   3615
   3616
   3617
   3618
   3619
   3620
   3621
   3622
   3623
   3624
   3625
   3626
   3627
   3628
   3629
   3630
   3631
   3632
   3633
   3634
   3635
   3636
   3637
   3638
   3639
   3640
   3641
   3642
   3643
   3644
   3645
   3646
   3647
   3648
   3649
   3650
   3651
   3652
   3653
   3654
   3655
   3656
   3657
   3658
   3659
   3660
   3661
   3662
   3663
   3664
   3665
   3666
   3667
   3668
   3669
   3670
   3671
   3672
   3673
   3674
   3675
   3676
   3677
   3678
   3679
   3680
   3681
   3682
   3683
   3684
   3685
   3686
   3687
   3688
   3689
   3690
   3691
   3692
   3693
   3694
   3695
   3696
   3697
   3698
   3699
   3700
   3701
   3702
   3703
   3704
   3705
   3706
   3707
   3708
   3709
   3710
   3711
   3712
   3713
   3714
   3715
   3716
   3717
   3718
   3719
   3720
   3721
   3722
   3723
   3724
   3725
   3726
   3727
   3728
   3729
   3730
   3731
   3732
   3733
   3734
   3735
   3736
   3737
   3738
   3739
   3740
   3741
   3742
   3743
   3744
   3745
   3746
   3747
   3748
   3749
   3750
   3751
   3752
   3753
   3754
   3755
   3756
   3757
   3758
   3759
   3760
   3761
   3762
   3763
   3764
   3765
   3766
   3767
   3768
   3769
   3770
   3771
   3772
   3773
   3774
   3775
   3776
   3777
   3778
   3779
   3780
   3781
   3782
   3783
   3784
   3785
   3786
   3787
   3788
   3789
   3790
   3791
   3792
   3793
   3794
   3795
   3796
   3797
   3798
   3799
   3800
   3801
   3802
   3803
   3804
   3805
   3806
   3807
   3808
   3809
   3810
   3811
   3812
   3813
   3814
   3815
   3816
   3817
   3818
   3819
   3820
   3821
   3822
   3823
   3824
   3825
   3826
   3827
   3828
   3829
   3830
   3831
   3832
   3833
   3834
   3835
   3836
   3837
   3838
   3839
   3840
   3841
   3842
   3843
   3844
   3845
   3846
   3847
   3848
   3849
   3850
   3851
   3852
   3853
   3854
   3855
   3856
   3857
   3858
   3859
   3860
   3861
   3862
   3863
   3864
   3865
   3866
   3867
   3868
   3869
   3870
   3871
   3872
   3873
   3874
   3875
   3876
   3877
   3878
   3879
   3880
   3881
   3882
   3883
   3884
   3885
   3886
   3887
   3888
   3889
   3890
   3891
   3892
   3893
   3894
   3895
   3896
   3897
   3898
   3899
   3900
   3901
   3902
   3903
   3904
   3905
   3906
   3907
   3908
   3909
   3910
   3911
   3912
   3913
   3914
   3915
   3916
   3917
   3918
   3919
   3920
   3921
   3922
   3923
   3924
   3925
   3926
   3927
   3928
   3929
   3930
   3931
   3932
   3933
   3934
   3935
   3936
   3937
   3938
   3939
   3940
   3941
   3942
   3943
   3944
   3945
   3946
   3947
   3948
   3949
   3950
   3951
   3952
   3953
   3954
   3955
   3956
   3957
   3958
   3959
   3960
   3961
   3962
   3963
   3964
   3965
   3966
   3967
   3968
   3969
   3970
   3971
   3972
   3973
   3974
   3975
   3976
   3977
   3978
   3979
   3980
   3981
   3982
   3983
   3984
   3985
   3986
   3987
   3988
   3989
   3990
   3991
   3992
   3993
   3994
   3995
   3996
   3997
   3998
   3999
   4000
   4001
   4002
   4003
   4004
   4005
   4006
   4007
   4008
   4009
   4010
   4011
   4012
   4013
   4014
   4015
   4016
   4017
   4018
   4019
   4020
   4021
   4022
   4023
   4024
   4025
   4026
   4027
   4028
   4029
   4030
   4031
   4032
   4033
   4034
   4035
   4036
   4037
   4038
   4039
   4040
   4041
   4042
   4043
   4044
   4045
   4046
   4047
   4048
   4049
   4050
   4051
   4052
   4053
   4054
   4055
   4056
   4057
   4058
   4059
   4060
   4061
   4062
   4063
   4064
   4065
   4066
   4067
   4068
   4069
   4070
   4071
   4072
   4073
   4074
   4075
   4076
   4077
   4078
   4079
   4080
   4081
   4082
   4083
   4084
   4085
   4086
   4087
   4088
   4089
   4090
   4091
   4092
   4093
   4094
   4095
   4096
   4097
   4098
   4099
   4100
   4101
   4102
   4103
   4104
   4105
   4106
   4107
   4108
   4109
   4110
   4111
   4112
   4113
   4114
   4115
   4116
   4117
   4118
   4119
   4120
   4121
   4122
   4123
   4124
   4125
   4126
   4127
   4128
   4129
   4130
   4131
   4132
   4133
   4134
   4135
   4136
   4137
   4138
   4139
   4140
   4141
   4142
   4143
   4144
   4145
   4146
   4147
   4148
   4149
   4150
   4151
   4152
   4153
   4154
   4155
   4156
   4157
   4158
   4159
   4160
   4161
   4162
   4163
   4164
   4165
   4166
   4167
   4168
   4169
   4170
   4171
   4172
   4173
   4174
   4175
   4176
   4177
   4178
   4179
   4180
   4181
   4182
   4183
   4184
   4185
   4186
   4187
   4188
   4189
   4190
   4191
   4192
   4193
   4194
   4195
   4196
   4197
   4198
   4199
   4200
   4201
   4202
   4203
   4204
   4205
   4206
   4207
   4208
   4209
   4210
   4211
   4212
   4213
   4214
   4215
   4216
   4217
   4218
   4219
   4220
   4221
   4222
   4223
   4224
   4225
   4226
   4227
   4228
   4229
   4230
   4231
   4232
   4233
   4234
   4235
   4236
   4237
   4238
   4239
   4240
   4241
   4242
   4243
   4244
   4245
   4246
   4247
   4248
   4249
   4250
   4251
   4252
   4253
   4254
   4255
   4256
   4257
   4258
   4259
   4260
   4261
   4262
   4263
   4264
   4265
   4266
   4267
   4268
   4269
   4270
   4271
   4272
   4273
   4274
   4275
   4276
   4277
   4278
   4279
   4280
   4281
   4282
   4283
   4284
   4285
   4286
   4287
   4288
   4289
   4290
   4291
   4292
   4293
   4294
   4295
   4296
   4297
   4298
   4299
   4300
   4301
   4302
   4303
   4304
   4305
   4306
   4307
   4308
   4309
   4310
   4311
   4312
   4313
   4314
   4315
   4316
   4317
   4318
   4319
   4320
   4321
   4322
   4323
   4324
   4325
   4326
   4327
   4328
   4329
   4330
   4331
   4332
   4333
   4334
   4335
   4336
   4337
   4338
   4339
   4340
   4341
   4342
   4343
   4344
   4345
   4346
   4347
   4348
   4349
   4350
   4351
   4352
   4353
   4354
   4355
   4356
   4357
   4358
   4359
   4360
   4361
   4362
   4363
   4364
   4365
   4366
   4367
   4368
   4369
   4370
   4371
   4372
   4373
   4374
   4375
   4376
   4377
   4378
   4379
   4380
   4381
   4382
   4383
   4384
   4385
   4386
   4387
   4388
   4389
   4390
   4391
   4392
   4393
   4394
   4395
   4396
   4397
   4398
   4399
   4400
   4401
   4402
   4403
   4404
   4405
   4406
   4407
   4408
   4409
   4410
   4411
   4412
   4413
   4414
   4415
   4416
   4417
   4418
   4419
   4420
   4421
   4422
   4423
   4424
   4425
   4426
   4427
   4428
   4429
   4430
   4431
   4432
   4433
   4434
   4435
   4436
   4437
   4438
   4439
   4440
   4441
   4442
   4443
   4444
   4445
   4446
   4447
   4448
   4449
   4450
   4451
   4452
   4453
   4454
   4455
   4456
   4457
   4458
   4459
   4460
   4461
   4462
   4463
   4464
   4465
   4466
   4467
   4468
   4469
   4470
   4471
   4472
   4473
   4474
   4475
   4476
   4477
   4478
   4479
   4480
   4481
   4482
   4483
   4484
   4485
   4486
   4487
   4488
   4489
   4490
   4491
   4492
   4493
   4494
   4495
   4496
   4497
   4498
   4499
   4500
   4501
   4502
   4503
   4504
   4505
   4506
   4507
   4508
   4509
   4510
   4511
   4512
   4513
   4514
   4515
   4516
   4517
   4518
   4519
   4520
   4521
   4522
   4523
   4524
   4525
   4526
   4527
   4528
   4529
   4530
   4531
   4532
   4533
   4534
   4535
   4536
   4537
   4538
   4539
   4540
   4541
   4542
   4543
   4544
   4545
   4546
   4547
   4548
   4549
   4550
   4551
   4552
   4553
   4554
   4555
   4556
   4557
   4558
   4559
   4560
   4561
   4562
   4563
   4564
   4565
   4566
   4567
   4568
   4569
   4570
   4571
   4572
   4573
   4574
   4575
   4576
   4577
   4578
   4579
   4580
   4581
   4582
   4583
   4584
   4585
   4586
   4587
   4588
   4589
   4590
   4591
   4592
   4593
   4594
   4595
   4596
   4597
   4598
   4599
   4600
   4601
   4602
   4603
   4604
   4605
   4606
   4607
   4608
   4609
   4610
   4611
   4612
   4613
   4614
   4615
   4616
   4617
   4618
   4619
   4620
   4621
   4622
   4623
   4624
   4625
   4626
   4627
   4628
   4629
   4630
   4631
   4632
   4633
   4634
   4635
   4636
   4637
   4638
   4639
   4640
   4641
   4642
   4643
   4644
   4645
   4646
   4647
   4648
   4649
   4650
   4651
   4652
   4653
   4654
   4655
   4656
   4657
   4658
   4659
   4660
   4661
   4662
   4663
   4664
   4665
   4666
   4667
   4668
   4669
   4670
   4671
   4672
   4673
   4674
   4675
   4676
   4677
   4678
   4679
   4680
   4681
   4682
   4683
   4684
   4685
   4686
   4687
   4688
   4689
   4690
   4691
   4692
   4693
   4694
   4695
   4696
   4697
   4698
   4699
   4700
   4701
   4702
   4703
   4704
   4705
   4706
   4707
   4708
   4709
   4710
   4711
   4712
   4713
   4714
   4715
   4716
   4717
   4718
   4719
   4720
   4721
   4722
   4723
   4724
   4725
   4726
   4727
   4728
   4729
   4730
   4731
   4732
   4733
   4734
   4735
   4736
   4737
   4738
   4739
   4740
   4741
   4742
   4743
   4744
   4745
   4746
   4747
   4748
   4749
   4750
   4751
   4752
   4753
   4754
   4755
   4756
   4757
   4758
   4759
   4760
   4761
   4762
   4763
   4764
   4765
   4766
   4767
   4768
   4769
   4770
   4771
   4772
   4773
   4774
   4775
   4776
   4777
   4778
   4779
   4780
   4781
   4782
   4783
   4784
   4785
   4786
   4787
   4788
   4789
   4790
   4791
   4792
   4793
   4794
   4795
   4796
   4797
   4798
   4799
   4800
   4801
   4802
   4803
   4804
   4805
   4806
   4807
   4808
   4809
   4810
   4811
   4812
   4813
   4814
   4815
   4816
   4817
   4818
   4819
   4820
   4821
   4822
   4823
   4824
   4825
   4826
   4827
   4828
   4829
   4830
   4831
   4832
   4833
   4834
   4835
   4836
   4837
   4838
   4839
   4840
   4841
   4842
   4843
   4844
   4845
   4846
   4847
   4848
   4849
   4850
   4851
   4852
   4853
   4854
   4855
   4856
   4857
   4858
   4859
   4860
   4861
   4862
   4863
   4864
   4865
   4866
   4867
   4868
   4869
   4870
   4871
   4872
   4873
   4874
   4875
   4876
   4877
   4878
   4879
   4880
   4881
   4882
   4883
   4884
   4885
   4886
   4887
   4888
   4889
   4890
   4891
   4892
   4893
   4894
   4895
   4896
   4897
   4898
   4899
   4900
   4901
   4902
   4903
   4904
   4905
   4906
   4907
   4908
   4909
   4910
   4911
   4912
   4913
   4914
   4915
   4916
   4917
   4918
   4919
   4920
   4921
   4922
   4923
   4924
   4925
   4926
   4927
   4928
   4929
   4930
   4931
   4932
   4933
   4934
   4935
   4936
   4937
   4938
   4939
   4940
   4941
   4942
   4943
   4944
   4945
   4946
   4947
   4948
   4949
   4950
   4951
   4952
   4953
   4954
   4955
   4956
   4957
   4958
   4959
   4960
   4961
   4962
   4963
   4964
   4965
   4966
   4967
   4968
   4969
   4970
   4971
   4972
   4973
   4974
   4975
   4976
   4977
   4978
   4979
   4980
   4981
   4982
   4983
   4984
   4985
   4986
   4987
   4988
   4989
   4990
   4991
   4992
   4993
   4994
   4995
   4996
   4997
   4998
   4999
   5000
   5001
   5002
   5003
   5004
   5005
   5006
   5007
   5008
   5009
   5010
   5011
   5012
   5013
   5014
   5015
   5016
   5017
   5018
   5019
   5020
   5021
   5022
   5023
   5024
   5025
   5026
   5027
   5028
   5029
   5030
   5031
   5032
   5033
   5034
   5035
   5036
   5037
   5038
   5039
   5040
   5041
   5042
   5043
   5044
   5045
   5046
   5047
   5048
   5049
   5050
   5051
   5052
   5053
   5054
   5055
   5056
   5057
   5058
   5059
   5060
   5061
   5062
   5063
   5064
   5065
   5066
   5067
   5068
   5069
   5070
   5071
   5072
   5073
   5074
   5075
   5076
   5077
   5078
   5079
   5080
   5081
   5082
   5083
   5084
   5085
   5086
   5087
   5088
   5089
   5090
   5091
   5092
   5093
   5094
   5095
   5096
   5097
   5098
   5099
   5100
   5101
   5102
   5103
   5104
   5105
   5106
   5107
   5108
   5109
   5110
   5111
   5112
   5113
   5114
   5115
   5116
   5117
   5118
   5119
   5120
   5121
   5122
   5123
   5124
   5125
   5126
   5127
   5128
   5129
   5130
   5131
   5132
   5133
   5134
   5135
   5136
   5137
   5138
   5139
   5140
   5141
   5142
   5143
   5144
   5145
   5146
   5147
   5148
   5149
   5150
   5151
   5152
   5153
   5154
   5155
   5156
   5157
   5158
   5159
   5160
   5161
   5162
   5163
   5164
   5165
   5166
   5167
   5168
   5169
   5170
   5171
   5172
   5173
   5174
   5175
   5176
   5177
   5178
   5179
   5180
   5181
   5182
   5183
   5184
   5185
   5186
   5187
   5188
   5189
   5190
   5191
   5192
   5193
   5194
   5195
   5196
   5197
   5198
   5199
   5200
   5201
   5202
   5203
   5204
   5205
   5206
   5207
   5208
   5209
   5210
   5211
   5212
   5213
   5214
   5215
   5216
   5217
   5218
   5219
   5220
   5221
   5222
   5223
   5224
   5225
   5226
   5227
   5228
   5229
   5230
   5231
   5232
   5233
   5234
   5235
   5236
   5237
   5238
   5239
   5240
   5241
   5242
   5243
   5244
   5245
   5246
   5247
   5248
   5249
   5250
   5251
   5252
   5253
   5254
   5255
   5256
   5257
   5258
   5259
   5260
   5261
   5262
   5263
   5264
   5265
   5266
   5267
   5268
   5269
   5270
   5271
   5272
   5273
   5274
   5275
   5276
   5277
   5278
   5279
   5280
   5281
   5282
   5283
   5284
   5285
   5286
   5287
   5288
   5289
   5290
   5291
   5292
   5293
   5294
   5295
   5296
   5297
   5298
   5299
   5300
   5301
   5302
   5303
   5304
   5305
   5306
   5307
   5308
   5309
   5310
   5311
   5312
   5313
   5314
   5315
   5316
   5317
   5318
   5319
   5320
   5321
   5322
   5323
   5324
   5325
   5326
   5327
   5328
   5329
   5330
   5331
   5332
   5333
   5334
   5335
   5336
   5337
   5338
   5339
   5340
   5341
   5342
   5343
   5344
   5345
   5346
   5347
   5348
   5349
   5350
   5351
   5352
   5353
   5354
   5355
   5356
   5357
   5358
   5359
   5360
   5361
   5362
   5363
   5364
   5365
   5366
   5367
   5368
   5369
   5370
   5371
   5372
   5373
   5374
   5375
   5376
   5377
   5378
   5379
   5380
   5381
   5382
   5383
   5384
   5385
   5386
   5387
   5388
   5389
   5390
   5391
   5392
   5393
   5394
   5395
   5396
   5397
   5398
   5399
   5400
   5401
   5402
   5403
   5404
   5405
   5406
   5407
   5408
   5409
   5410
   5411
   5412
   5413
   5414
   5415
   5416
   5417
   5418
   5419
   5420
   5421
   5422
   5423
   5424
   5425
   5426
   5427
   5428
   5429
   5430
   5431
   5432
   5433
   5434
   5435
   5436
   5437
   5438
   5439
   5440
   5441
   5442
   5443
   5444
   5445
   5446
   5447
   5448
   5449
   5450
   5451
   5452
   5453
   5454
   5455
   5456
   5457
   5458
   5459
   5460
   5461
   5462
   5463
   5464
   5465
   5466
   5467
   5468
   5469
   5470
   5471
   5472
   5473
   5474
   5475
   5476
   5477
   5478
   5479
   5480
   5481
   5482
   5483
   5484
   5485
   5486
   5487
   5488
   5489
   5490
   5491
   5492
   5493
   5494
   5495
   5496
   5497
   5498
   5499
   5500
   5501
   5502
   5503
   5504
   5505
   5506
   5507
   5508
   5509
   5510
   5511
   5512
   5513
   5514
   5515
   5516
   5517
   5518
   5519
   5520
   5521
   5522
   5523
   5524
   5525
   5526
   5527
   5528
   5529
   5530
   5531
   5532
   5533
   5534
   5535
   5536
   5537
   5538
   5539
   5540
   5541
   5542
   5543
   5544
   5545
   5546
   5547
   5548
   5549
   5550
   5551
   5552
   5553
   5554
   5555
   5556
   5557
   5558
   5559
   5560
   5561
   5562
   5563
   5564
   5565
   5566
   5567
   5568
   5569
   5570
   5571
   5572
   5573
   5574
   5575
   5576
   5577
   5578
   5579
   5580
   5581
   5582
   5583
   5584
   5585
   5586
   5587
   5588
   5589
   5590
   5591
   5592
   5593
   5594
   5595
   5596
   5597
   5598
   5599
   5600
   5601
   5602
   5603
   5604
   5605
   5606
   5607
   5608
   5609
   5610
   5611
   5612
   5613
   5614
   5615
   5616
   5617
   5618
   5619
   5620
   5621
   5622
   5623
   5624
   5625
   5626
   5627
   5628
   5629
   5630
   5631
   5632
   5633
   5634
   5635
   5636
   5637
   5638
   5639
   5640
   5641
   5642
   5643
   5644
   5645
   5646
   5647
   5648
   5649
   5650
   5651
   5652
   5653
   5654
   5655
   5656
   5657
   5658
   5659
   5660
   5661
   5662
   5663
   5664
   5665
   5666
   5667
   5668
   5669
   5670
   5671
   5672
   5673
   5674
   5675
   5676
   5677
   5678
   5679
   5680
   5681
   5682
   5683
   5684
   5685
   5686
   5687
   5688
   5689
   5690
   5691
   5692
   5693
   5694
   5695
   5696
   5697
   5698
   5699
   5700
   5701
   5702
   5703
   5704
   5705
   5706
   5707
   5708
   5709
   5710
   5711
   5712
   5713
   5714
   5715
   5716
   5717
   5718
   5719
   5720
   5721
   5722
   5723
   5724
   5725
   5726
   5727
   5728
   5729
   5730
   5731
   5732
   5733
   5734
   5735
   5736
   5737
   5738
   5739
   5740
   5741
   5742
   5743
   5744
   5745
   5746
   5747
   5748
   5749
   5750
   5751
   5752
   5753
   5754
   5755
   5756
   5757
   5758
   5759
   5760
   5761
   5762
   5763
   5764
   5765
   5766
   5767
   5768
   5769
   5770
   5771
   5772
   5773
   5774
   5775
   5776
   5777
   5778
   5779
   5780
   5781
   5782
   5783
   5784
   5785
   5786
   5787
   5788
   5789
   5790
   5791
   5792
   5793
   5794
   5795
   5796
   5797
   5798
   5799
   5800
   5801
   5802
   5803
   5804
   5805
   5806
   5807
   5808
   5809
   5810
   5811
   5812
   5813
   5814
   5815
   5816
   5817
   5818
   5819
   5820
   5821
   5822
   5823
   5824
   5825
   5826
   5827
   5828
   5829
   5830
   5831
   5832
   5833
   5834
   5835
   5836
   5837
   5838
   5839
   5840
   5841
   5842
   5843
   5844
   5845
   5846
   5847
   5848
   5849
   5850
   5851
   5852
   5853
   5854
   5855
   5856
   5857
   5858
   5859
   5860
   5861
   5862
   5863
   5864
   5865
   5866
   5867
   5868
   5869
   5870
   5871
   5872
   5873
   5874
   5875
   5876
   5877
   5878
   5879
   5880
   5881
   5882
   5883
   5884
   5885
   5886
   5887
   5888
   5889
   5890
   5891
   5892
   5893
   5894
   5895
   5896
   5897
   5898
   5899
   5900
   5901
   5902
   5903
   5904
   5905
   5906
   5907
   5908
   5909
   5910
   5911
   5912
   5913
   5914
   5915
   5916
   5917
   5918
   5919
   5920
   5921
   5922
   5923
   5924
   5925
   5926
   5927
   5928
   5929
   5930
   5931
   5932
   5933
   5934
   5935
   5936
   5937
   5938
   5939
   5940
   5941
   5942
   5943
   5944
   5945
   5946
   5947
   5948
   5949
   5950
   5951
   5952
   5953
   5954
   5955
   5956
   5957
   5958
   5959
   5960
   5961
   5962
   5963
   5964
   5965
   5966
   5967
   5968
   5969
   5970
   5971
   5972
   5973
   5974
   5975
   5976
   5977
   5978
   5979
   5980
   5981
   5982
   5983
   5984
   5985
   5986
   5987
   5988
   5989
   5990
   5991
   5992
   5993
   5994
   5995
   5996
   5997
   5998
   5999
   6000
   6001
   6002
   6003
   6004
   6005
   6006
   6007
   6008
   6009
   6010
   6011
   6012
   6013
   6014
   6015
   6016
   6017
   6018
   6019
   6020
   6021
   6022
   6023
   6024
   6025
   6026
   6027
   6028
   6029
   6030
   6031
   6032
   6033
   6034
   6035
   6036
   6037
   6038
   6039
   6040
   6041
   6042
   6043
   6044
   6045
   6046
   6047
   232
   #+end_example
* day2
** init_day2
   #+name: init_day2
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/2/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[19eab2b1d4a4c2fe7862e5788b5632468fff0607]: init_day2
   #+begin_example
   29x13x26
   11x11x14
   27x2x5
   6x10x13
   15x19x10
   26x29x15
   8x23x6
   17x8x26
   20x28x3
   23x12x24
   11x17x3
   19x23x28
   25x2x25
   1x15x3
   25x14x4
   23x10x23
   29x19x7
   17x10x13
   26x30x4
   16x7x16
   7x5x27
   8x23x6
   2x20x2
   18x4x24
   30x2x26
   6x14x23
   10x23x9
   29x29x22
   1x21x14
   22x10x13
   10x12x10
   20x13x11
   12x2x14
   2x16x29
   27x18x26
   6x12x20
   18x17x8
   14x25x1
   30x15x22
   17x18x7
   28x23x24
   15x12x25
   14x7x20
   29x23x8
   24x5x22
   6x22x8
   1x15x26
   14x5x1
   24x28x28
   17x23x23
   4x15x7
   23x8x11
   6x15x1
   23x18x13
   17x1x26
   23x13x17
   2x18x8
   22x22x1
   10x22x6
   28x29x20
   22x21x25
   14x8x23
   12x30x14
   8x7x5
   3x30x15
   4x3x29
   25x18x3
   16x7x16
   4x3x8
   9x16x30
   20x28x3
   28x24x6
   4x18x2
   23x18x5
   22x4x30
   15x30x9
   7x12x12
   3x22x29
   12x1x9
   9x2x25
   17x11x10
   25x24x7
   7x27x26
   26x4x12
   29x2x26
   19x24x12
   23x23x3
   26x28x16
   18x4x16
   25x30x18
   29x19x19
   16x3x27
   29x25x29
   18x19x5
   14x21x30
   19x13x26
   19x10x15
   9x4x7
   18x6x6
   24x25x29
   9x12x27
   15x3x22
   30x17x21
   18x19x28
   9x11x12
   8x28x22
   11x3x4
   28x17x20
   24x18x15
   11x12x13
   6x19x24
   28x4x5
   28x22x23
   13x29x2
   9x16x15
   29x28x1
   10x18x30
   19x11x12
   26x28x25
   23x17x13
   25x1x21
   17x1x27
   17x27x28
   28x13x15
   14x13x25
   11x29x7
   22x29x5
   13x6x14
   23x18x13
   25x7x17
   18x9x20
   21x11x2
   28x11x13
   13x25x1
   19x29x25
   16x29x4
   10x21x10
   7x25x17
   5x9x3
   1x15x6
   8x27x29
   23x6x30
   22x22x29
   6x20x30
   26x25x29
   10x19x19
   20x30x9
   5x30x24
   17x10x27
   30x14x30
   8x17x4
   7x18x6
   3x5x4
   24x17x15
   14x20x17
   22x27x15
   18x14x15
   23x9x11
   21x16x29
   7x18x21
   9x3x29
   10x13x4
   2x30x4
   23x20x4
   8x22x21
   29x28x4
   13x16x25
   21x9x11
   7x26x26
   13x23x30
   19x7x10
   9x23x21
   21x9x17
   9x21x15
   20x29x22
   23x13x15
   19x25x2
   12x11x30
   20x21x6
   21x6x17
   24x26x9
   29x21x29
   29x26x16
   6x16x1
   2x12x6
   6x7x20
   7x2x22
   6x22x4
   13x11x27
   25x27x14
   11x8x6
   26x11x14
   30x3x29
   27x21x20
   15x16x26
   6x22x10
   11x9x25
   23x13x6
   13x9x3
   30x22x13
   29x23x14
   25x19x6
   7x29x11
   19x18x5
   29x25x13
   25x24x27
   1x9x12
   22x9x17
   14x12x28
   19x21x17
   13x25x17
   14x25x12
   4x14x30
   7x15x28
   3x6x25
   6x2x16
   15x19x11
   17x30x20
   20x23x7
   26x21x6
   26x29x24
   2x4x30
   4x22x18
   13x3x28
   27x6x21
   5x3x27
   12x7x11
   28x11x9
   12x9x2
   1x22x20
   15x13x28
   14x19x16
   28x20x3
   20x4x9
   26x7x26
   18x19x25
   7x1x13
   20x23x29
   27x26x8
   11x15x15
   10x21x23
   29x2x11
   21x28x20
   3x18x23
   26x17x17
   14x26x17
   20x7x17
   18x12x8
   4x8x8
   8x15x23
   24x29x5
   1x25x8
   1x28x17
   16x18x13
   29x24x22
   13x16x10
   14x7x16
   15x11x29
   12x15x19
   17x6x28
   4x3x9
   15x16x8
   29x27x11
   2x24x20
   4x21x3
   29x24x27
   18x22x22
   7x8x18
   20x7x8
   19x9x2
   20x17x2
   2x29x10
   19x25x1
   28x9x3
   29x27x20
   7x21x7
   10x4x22
   26x8x5
   26x14x1
   5x27x9
   2x18x3
   3x27x17
   30x17x23
   30x11x20
   4x6x7
   6x29x27
   30x16x20
   24x30x28
   19x20x26
   18x1x25
   26x12x12
   19x15x29
   16x21x24
   23x13x26
   25x16x10
   8x9x18
   24x14x1
   24x15x21
   19x9x14
   8x23x11
   22x2x16
   29x9x26
   3x16x25
   15x20x30
   3x11x12
   15x2x3
   13x7x4
   2x7x27
   9x26x11
   30x24x19
   28x17x21
   10x8x2
   11x15x26
   10x12x20
   24x24x27
   25x26x16
   13x4x20
   25x13x11
   12x22x3
   20x7x1
   12x18x6
   26x8x20
   14x2x7
   23x12x1
   26x24x24
   27x26x23
   26x17x5
   17x24x2
   26x5x6
   23x5x1
   5x18x30
   24x21x19
   5x28x11
   21x20x14
   25x4x22
   26x24x11
   7x5x8
   13x1x30
   5x1x6
   14x5x2
   8x11x7
   13x20x1
   17x30x14
   29x22x10
   12x26x3
   27x17x3
   26x27x4
   5x26x17
   22x11x19
   8x26x3
   24x19x22
   7x1x4
   6x27x30
   4x28x14
   16x14x18
   4x5x20
   19x25x4
   15x15x1
   10x14x14
   16x18x24
   21x27x15
   5x5x10
   1x7x13
   16x2x8
   13x15x11
   3x25x10
   20x29x8
   12x3x2
   10x13x12
   25x27x1
   11x30x19
   7x19x13
   27x6x18
   16x21x19
   21x29x5
   16x23x12
   29x19x15
   5x5x10
   27x15x1
   13x16x22
   29x19x5
   8x12x9
   3x18x5
   13x25x3
   5x9x21
   10x20x16
   9x9x11
   23x21x1
   22x2x15
   27x8x13
   23x7x3
   26x30x15
   29x15x16
   16x27x13
   2x18x9
   10x27x8
   20x9x25
   10x2x17
   16x13x13
   21x26x1
   27x26x24
   9x30x16
   19x17x28
   25x15x1
   10x26x6
   10x11x11
   5x26x25
   30x4x15
   9x8x23
   14x25x7
   8x28x8
   28x18x24
   4x4x25
   16x25x11
   17x27x8
   15x16x9
   24x13x21
   17x3x27
   27x5x26
   8x27x12
   29x2x8
   24x23x30
   1x30x21
   6x18x20
   13x14x12
   25x30x23
   24x6x24
   12x7x21
   11x6x8
   8x30x30
   26x3x12
   28x6x5
   18x7x1
   7x6x20
   14x16x18
   11x22x15
   4x20x10
   19x24x19
   8x24x11
   4x9x10
   6x6x22
   10x9x29
   1x5x28
   19x25x29
   20x30x3
   15x13x13
   9x9x24
   20x14x29
   26x24x13
   2x25x8
   10x26x2
   12x19x12
   18x6x20
   4x5x14
   26x27x10
   16x26x20
   3x21x15
   2x26x18
   14x11x17
   26x26x25
   10x1x11
   17x19x19
   27x28x26
   9x2x10
   19x30x15
   23x30x14
   15x3x20
   2x14x22
   21x18x8
   22x4x29
   19x6x29
   9x26x29
   16x10x9
   22x12x22
   13x28x14
   25x14x28
   28x3x30
   10x17x1
   10x27x22
   10x23x19
   14x25x9
   11x24x8
   30x25x10
   22x13x28
   2x7x6
   11x20x8
   9x22x14
   19x16x9
   11x24x4
   11x17x2
   6x4x10
   26x10x10
   12x14x5
   27x10x3
   15x3x6
   11x7x19
   22x10x12
   21x26x10
   13x20x3
   27x8x8
   1x24x23
   24x9x22
   23x17x23
   3x28x19
   2x20x28
   23x17x24
   26x1x4
   4x1x12
   5x6x16
   13x22x13
   25x21x21
   20x21x12
   9x24x25
   17x16x12
   12x28x9
   18x16x27
   29x12x2
   30x12x15
   24x11x10
   4x9x22
   4x24x5
   19x11x5
   6x25x6
   1x20x17
   22x8x21
   11x26x4
   16x19x3
   8x12x8
   13x2x18
   10x5x11
   8x12x17
   21x2x5
   26x17x26
   23x18x17
   28x11x14
   1x4x27
   29x5x28
   5x9x10
   5x7x25
   20x15x27
   15x11x17
   12x14x1
   29x14x4
   18x14x18
   14x25x24
   26x14x18
   13x8x11
   30x1x23
   3x4x12
   12x24x9
   8x6x16
   14x15x30
   12x30x8
   22x11x18
   16x30x28
   17x18x4
   13x14x23
   2x28x8
   3x28x30
   29x30x8
   4x6x26
   6x30x17
   11x30x30
   19x4x3
   12x15x20
   22x28x4
   26x30x2
   6x12x7
   1x10x5
   25x29x7
   17x9x18
   16x21x29
   21x14x7
   15x16x11
   26x6x15
   8x24x7
   2x20x4
   2x9x3
   19x8x13
   18x7x22
   27x14x17
   2x13x8
   18x15x26
   15x27x27
   18x11x15
   1x29x20
   21x12x11
   20x2x15
   28x23x9
   1x1x17
   7x23x9
   30x9x27
   9x16x18
   15x24x28
   30x11x18
   29x26x10
   9x5x25
   2x1x19
   14x3x14
   6x3x6
   30x15x20
   20x17x27
   28x10x9
   14x24x28
   17x11x6
   12x3x6
   8x8x15
   23x14x21
   11x21x7
   5x13x30
   4x29x25
   30x28x24
   18x4x9
   3x15x6
   13x9x19
   30x14x7
   7x9x9
   17x11x26
   24x26x13
   16x21x16
   27x17x25
   2x21x11
   9x11x27
   3x3x7
   13x8x14
   20x20x26
   13x29x22
   30x11x1
   7x10x19
   27x5x9
   23x17x15
   21x6x13
   24x15x16
   18x4x14
   18x16x6
   22x11x18
   14x2x5
   15x3x7
   10x20x29
   16x1x10
   30x23x1
   10x15x11
   17x14x5
   22x8x13
   7x11x28
   26x17x3
   2x23x2
   28x13x19
   18x12x28
   22x23x16
   14x12x1
   20x8x19
   17x19x13
   29x2x12
   2x26x27
   29x16x4
   13x8x18
   16x15x30
   23x16x2
   28x8x27
   21x8x23
   13x20x26
   19x6x17
   17x30x15
   7x4x30
   2x13x30
   18x7x19
   4x13x27
   8x6x5
   18x20x25
   2x3x30
   23x27x13
   22x30x4
   23x25x25
   23x16x19
   25x3x1
   5x6x15
   11x29x12
   25x24x7
   16x7x20
   20x3x2
   12x27x15
   16x10x12
   1x3x14
   22x1x26
   2x24x18
   11x29x16
   15x2x9
   10x1x24
   21x8x11
   30x11x23
   6x30x21
   13x27x29
   14x6x5
   18x29x19
   12x4x28
   29x3x14
   10x30x28
   5x7x15
   14x1x10
   9x25x14
   7x24x18
   28x17x21
   18x13x25
   26x15x1
   21x1x19
   12x16x21
   4x6x13
   7x15x26
   17x19x5
   12x28x2
   1x20x19
   27x7x5
   17x26x8
   12x15x19
   5x23x10
   8x2x8
   16x13x12
   14x27x1
   26x29x3
   24x16x14
   14x13x13
   7x22x23
   2x9x30
   4x27x8
   26x27x15
   23x1x6
   25x29x18
   5x18x1
   20x8x20
   5x10x25
   30x25x15
   7x22x25
   28x26x17
   29x4x1
   21x11x27
   20x9x8
   25x22x12
   2x11x11
   23x2x16
   23x27x20
   2x13x28
   27x2x24
   11x1x17
   12x4x27
   16x20x22
   30x12x10
   5x15x4
   5x2x27
   12x4x25
   1x16x4
   27x4x4
   21x16x3
   27x26x3
   24x6x6
   24x12x12
   20x20x25
   8x29x2
   21x4x5
   2x4x8
   4x13x19
   3x20x10
   12x15x16
   6x5x4
   12x16x20
   22x19x17
   8x17x22
   25x16x15
   7x1x19
   10x1x7
   23x23x5
   28x6x12
   2x25x12
   10x27x12
   24x27x19
   14x14x20
   4x1x5
   16x27x29
   20x20x24
   28x24x30
   6x15x15
   9x15x30
   23x26x3
   17x24x21
   22x25x25
   18x29x10
   20x25x1
   24x11x16
   20x7x21
   20x7x9
   7x26x2
   5x18x1
   16x26x28
   4x10x18
   27x30x21
   26x9x9
   8x16x14
   6x27x8
   28x9x20
   13x13x4
   9x18x16
   18x15x18
   22x19x14
   14x10x17
   25x29x11
   1x18x19
   8x11x26
   18x6x14
   30x24x13
   27x1x27
   15x9x3
   2x29x17
   2x26x21
   22x9x9
   20x20x20
   22x28x2
   26x5x16
   11x3x14
   21x16x16
   18x26x7
   18x30x6
   7x11x12
   15x10x2
   27x2x16
   27x30x24
   28x14x24
   7x4x8
   6x28x15
   13x19x1
   22x26x30
   7x30x24
   2x17x21
   19x26x2
   19x24x15
   14x23x2
   21x27x15
   30x15x14
   21x29x5
   23x30x2
   4x1x2
   15x5x13
   21x2x30
   20x7x16
   1x21x25
   2x25x1
   12x29x5
   28x13x16
   26x3x12
   29x20x23
   28x12x20
   4x30x8
   16x15x16
   6x16x29
   2x28x13
   24x25x2
   26x15x22
   17x20x11
   18x12x7
   19x1x18
   8x27x13
   22x16x8
   19x26x17
   13x11x10
   22x12x3
   13x12x14
   29x17x9
   6x14x10
   14x20x10
   8x26x9
   25x13x22
   3x30x25
   14x28x1
   30x29x12
   3x17x15
   3x24x14
   28x24x22
   16x6x1
   20x25x14
   17x17x13
   6x19x27
   10x15x20
   8x23x20
   7x29x21
   18x9x25
   10x5x22
   2x27x27
   16x18x30
   15x5x12
   26x29x29
   28x11x10
   9x29x28
   24x15x23
   26x9x10
   5x1x25
   22x27x16
   7x29x3
   1x3x5
   8x7x29
   19x21x11
   28x13x30
   17x16x20
   5x10x25
   9x14x15
   15x14x23
   16x4x17
   21x8x2
   9x9x8
   22x22x4
   10x2x27
   12x19x10
   15x29x4
   22x14x7
   29x18x5
   1x7x27
   24x1x15
   23x23x26
   12x17x23
   26x10x24
   8x22x2
   8x1x10
   22x19x12
   2x23x13
   11x27x25
   26x15x27
   27x7x21
   18x9x6
   22x21x22
   7x12x26
   23x21x13
   14x3x8
   5x9x28
   29x29x15
   27x25x23
   12x2x24
   8x2x20
   29x19x4
   12x24x29
   2x27x28
   14x20x9
   28x6x25
   18x29x8
   19x11x30
   15x11x23
   18x7x7
   14x20x14
   26x18x22
   27x25x13
   12x10x30
   30x2x7
   28x10x1
   18x10x30
   22x11x5
   22x16x3
   25x15x9
   5x10x24
   4x28x8
   19x24x18
   3x4x25
   14x4x30
   11x26x3
   12x12x12
   26x7x24
   3x2x14
   1x27x7
   2x2x13
   3x26x26
   12x4x11
   12x17x20
   4x19x30
   5x18x10
   17x6x18
   19x30x20
   11x2x17
   30x13x19
   22x23x7
   17x28x2
   5x17x30
   7x11x4
   21x26x18
   15x28x4
   5x6x27
   12x6x16
   9x17x12
   27x20x5
   14x5x20
   27x14x6
   2x14x21
   4x28x30
   24x5x1
   19x29x29
   11x23x1
   8x16x21
   3x17x19
   10x13x5
   20x21x16
   23x3x6
   27x26x11
   3x2x22
   14x3x5
   10x9x8
   #+end_example

** day2-common (test)
   #+name: test_set
   #+begin_src python :results value :cache yes
   #
   data="2x3x4\n1x1x10"
   return data
   #+end_src

   #+RESULTS[c2c7c89dfd82b50f82037a93beb79abbcc05b8e2]: test_set
   : ^>v<

   #+name: day2-com
   #+begin_src python :results output :var data=test_set
     class wrap_pap():
         def __init__(self, data):
             data = str(data)
             sdata = data.splitlines()
             paps = []
             cur_sum = 0
             rib_sum = 0
             for pap in sdata:
                 l, w, h = pap.split('x')
                 l, w, h = int(l), int(w), int(h)
                 s1 = l*w
                 s2 = w*h
                 s3 = l*h
                 sa = 2*(s1+s2+s3)+min(s1,s2,s3)
                 s1 = l+w
                 s2 = l+h
                 s3 = w+h
                 sr = 2 * min(s1, s2, s3) + l*w*h
                 rib_sum += sr
                 cur_sum += sa
             self.cur_sum = cur_sum
             self.rib_sum = rib_sum
     wp = wrap_pap(data)


   #+end_src

   #+RESULTS: day2-com

** day2a
   #+name: day2a
   #+begin_src python :results output :var data=init_day2 :noweb yes
   <<day2-com>>
   print(wp.cur_sum)
   #+end_src

   #+RESULTS: day2a
   : 1586300

** day2b
   #+name: day2b
   #+begin_src python :results output :var data=init_day2 :noweb yes
   <<day2-com>>
   print(wp.rib_sum)
   #+end_src

   #+RESULTS: day2b
   : 3737498

* day3
** init_day3
   #+name: init_day3
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/3/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[b1f4efcfe27a090b0170a79bd381ced19a2de7af]: init_day3
   : v>v<vvv<<vv^v<v>vv>v<<<^^^^^<<^<vv>^>v^>^>^>^>^><vvvv<^>^<<^><<<^vvvv>^>^><^v^><^<>^^>^vvv^<vv>>^>^^<>><>^>vvv>>^vv>^<><>^<v^>^>^><vv^vv^>><<^><<v>><>^<^>>vvv>v>>>v<<^<><^<v<>v>^^v^^^<^v^^>>><^>^>v<>^<>>^>^^v^><v<v>>><>v<v^v>^v<>>^><v>^<>v^>^<>^v^^^v^^>>vv<<^^><^<vvv>^>^^<^>>^^^^^v^<v>vv<>>v^v<^v^^<><^<^vv^><>><><>v>vvv^vv^^<<><<vvv><<^v^><v<>vvv^<^>vvvv^>^>>^v^<v^vv<^^v<>v>vv^<>><v<<<^v^<<><v<^<^<><^^^>^>>v>^>v^<>v><^<^<v^>^^vv<^^<>v^v^vv<>>>>v^v<>><^^v>vv^^>v^v>v<vv>>v>><v^v^v>vv>^^>^v><<vv^v^^vv<^v><^<<v<v^>vv^^^<v^>v>v^^^>><^^<v^<^>>v><vv<v^^>^^v>>v^^^<^^v>^v>><^<^<>>v<<^^vv>^^^v<^<^<v<v^^vv>^vv^>>v^><v>><<<>^vv^<^<>v^^<<<v<^>^><><v^^>>^^^<^vv<^^^>><^^v>^^v^<v^v^>^^<v>^<^v<^<<<<^<v^>v^<^^<>^^>^><<>>^v><>><^<v><^^^>>vv>^><vv>^^^^^v^vvv><><^<^>v>v^v^>^><><^<^><>v<<vv<^>><>^v^^v>^<<<>^v^>^<<v^vv<>v^<v^^vv><<v^<>>>^<v>vv>v>>>^<^>><vv<>>>>v<v>>>^v>v><>>vvv<^^><<^>^>v<^vvvv<v><vv<><^^^v^^^>v^v<>v<^^v>>><>v<v^>>v><v^>>^^<v<<<^<v<><^^v><<v^><<<<^vv<^<>^><vv<<<<^>>>^v>^v>vv>^v<>v>v<v><^>>v>>^>^><^<v^v^>^v<><><^^>^<vvvv^^<>^^^>vv^v^v>^v^^v^^v><v^<^<>><^<v>v>>vv<<v>>vvvv<vv><>>^v^>^>>v^v^<<<vv<><v<<>>>^v<<v>^^vv^><>v>^>v><<<<<<<^>^^v^<<^^>>vvv^<><>><>^^v<<vv><^^v<^^><vv>v^>>>v^v><v^v<^>v^><>v<<>v>^^v><<<<><^v^v>>^<>^<<>^<v<<>>v<<>><^<<<<^v>^<^v>v>vv<v<v<<>^>v<^<<>v^<vvvv^>v>><<v><v<>v>v>>v^vvv^^>>>v^<^<<^^<<<><v>v^<<v<<<>v<^^<><v<v^^<v>^>v>>v<>^>^^>>^v<<>v^^^>>>^vv<^v<v>^>v>^><>v^^<>^^v^^vv^<^>^<<>><<^>^v>>><<<vvvv><<><v<^v^v<vvv^<><<^<vv><v^v^v^>v>v^<vvv^><^><^<vv><>>v^>^^^<>><v^<^^^<>v<<v<^v>>>^>>v^><<>vvv><^>>v><v><>v>>^>v><<><<>^<>^^^vv><v^>v^^>>^>^<^v<v<^^<^vvvv>v<v>^>v^>^><^<vvvv><^><><<v<>v<v^><^<v^>^v^^<<<<^><^^<^><>>^v<<^<<^vv>v>>v<^<^vv>><v<vv>v<v<v>^v<>^>v<>^v<<<v>>^^v>>><vvv>v^>^v^v>^^^v<vvvv>><^>vvv^<vv^^vv><<<>v<>v>^<vvv^<^<v<v<^vv^^>>vv^<^^v^><^^^^^v<^<v<^>>>vv^v^>^<v>^<><v^<^v>>><^v^<<v<<v<>v>^v<v^v>>^^v<<v<v<<>>>vv>>^v>>^<<<<^><<<><^^>>v<>^vvvv>v^^^>^^^>^<vvvv><^^v<v<>v<^v^v<<v^^^v^<v<^v>v^^<>^>^<^v>vv<v^vv<^<<>v><<^><><^^v<<><^^><>^v>^<><<^<^^<<>vv<>^^<<^>><<<>>vvv>^>v^^v^><<^>v>^>^<^<<>v<^>vv^v^v<>vv<<v>vv<vv><^>v^<>^vv^v^<v<^>>>>v^v><^<><<>vv^<vvv^>>vvv^>v>>><^^vv<vvvv>v<^<^>>^^>^^vv>>><^v<>^v^<<>v^^^<v>^>>^<^<v>>^v<^^^<v>^v>^>>v<vv>>^<v^<<>>^>>><v>v^<<^<v>>^<<^^<>v<^v<^<>v^v>^^v<vvvv>^vv>vvv>v^<^>><v^^vv<<<^>vvvv<>>^^<>v^<><>v<^<>v<>^>v<>vv<v^v>>v<v<^<v^^v^vv^vvv><^^>v>><>>^<^^<>>^>^<v^>>vvv^v><v>>^>^>v><><<><vv^v>v<>^v<^vv^^^<>^^<<^^^v<>><v<^<^<^<^^><v^v<^>v^>vvvv>^^v^>^<v<^^^>>^<<vv^<><><^^^^<<>^<><v>vv^<><^>^^<>v^<>>>v><>vvvvv>v>v^^>^<<vvvv<>vv>>v<<^<>^^^v^<><>>^<<<v<v<>>>><><v>v<v<>>^>^^^^vv^^<<><^^<<vv<^<>v>vv<v<><<<^<<v<<<<>v<>>^<^>^>><v>v>><^^<>><<<><<><v^^v<<><^<^v<v^><^^v<<>><<<<^>v^<v>><v^><v<vvv>v^v^<v><<>>v<><<v>^<>><>>^><>v^v>v<<>v<>v^^><<>>>v<<>>>>^>v>><v<<>>>vv>v>^<^^^<>v<v>^<^^v^vvv^>vv>^<v><vvvv>^<<>vvv<<<vv>^^<^>^>>v>v<<<<<>^^vv^>>v>^<^<v^v^>^v>>v>^v<><>^<^>v>v<<<^^^v>^<<<>vvv^v^^>^>>^>v>v<>^^><>>v>^>v<<<^^^v^<v^vv>><><^<^<><vvv<v^>>^v>vv<^v<<^vv>v^<<v>v>v>^v^>^v<<^v^vv>v<v>^<<><v^>>v<>><v<<<^v<<>vvv^<vv<vvv<<>^vv^^v><^>v^vv<<v^<<^^^<^<>^^<<>v<><<v>^><>^<><<v<v^^>vv<>^<v<^<vvv>vv>v><^^v<>><^v^v><><>><v<v>vv<>>><v^^v<>><<^>>><^^^vvv<<<vv<<^v<<<>><<vv>>>>v<<<<<vv><><v>v^^<<^vv^<vv<>>vv>^<>^v^^<>^^^vv>v^^<v<><v>v<v>>^v<v<>>^<v^^><>v^^^>v^^v<vv><^>v^v^<>v>v<v<^^>>v<^^vv^v<^^^^vv<<><<^>>^^<<v^^<<^>v^>>^^^><^^>^v^v>^<<v<vv<<<v<^^^>^>>^v<>^<^>v>^>^v^<^^^<^vv<v><^^>>v<v>^>^v^>>>>^v>^^<<^<v^v<^<<v<<^><^^<v^<><v>v^<<v^^<><<>>><vv<<><>^<>>>v<<v^^^v^^<<<vv<<^<^<^vv^<><><<^^<^^>v^>^<v<>>v^v<><<v>^^v>^<^<vvv<v>v^v>>>^^<^<v^>^vv<<<v<<>^><><^<>v>>>v<v^<>v>><^^^v^^^v<^^<vv^^^>v>v<>>^^<><>v>^<v<>^>>>><>v>^v>^vv^v<vv<<^^>><v<>^>^^<v<^>^<vvv>><>^<<>>><<<><>^^<<<v<>v^>v>v<v>^^^>^>^v<<>v>vv>><<<v>^^<v><vv<<v^^>^>>^><^>v<^<^v>><^^>v<vv^^><><>^><<><>v^>v<><^^>><>^<^^v<^<<v>><v><<<^^<<v<^vv^v<>><>>>^>v<vvv^>^<><v^><^<<^vv<^v^v^v<>v^^v>v^<^>^vv^>>><<>v^vv^<>^v^><<v^v<v>v^<><>>v^v^><>v^vvv^^^<<^<<v<<v<^vv^>>v^v>^^<v<>><>v>>v^<>^>v>^>><<>v^v><^v>v>>><v<v><^<^^>vv<v><^>^<^>^^v><><v<^^v<<><^<<v^<v<<><^^vvv^v>^>^<>>vv>v^^v^^vv<^^>><v^^vv><^v>v^<<v<^v>vvv<>>^v><<>^v<<<>^><^vv><<^^<v^>v<<v>^vv<>^v>>>><<<<^^<^v>^<^^<^<^^>>^^v>^^^^v^^^<<>^^vv<<v^^><v>><^<<><>^>v<>>v^^^>^v^^v^<v^v>v>>>>>^v>^>^^<vvv^^<v^<<<v<<>v>><^^^v<<^^<v>>^<^<^><^<<v^v><<vv<^<>>v>v>^v<><<v>^>vv^v<v>v><^<v>><>^<vv<v^^^^v<^^>><<^^>v>v>^^^<>v>^v^^>vv^vv<^^>><>^>^<>v>><>^v<<v>v>^><^^^v^<vv><<^v^>v^>vv>v^<>v><vv><^v>v<><v^v^v<^v<>^v<v^<<><<v>>^v><v>^^<>vvv^>^<<v^>><^>><^<>^v<v<v<^vvv<><<^v^<v>><<<v>^<^<v>v>^vv^v>v<^^vv<<vvv^<v>><>vv^>v<<>v<vvvv>>v>^^>>><<<^>^vv>><v>^^^>v<^vv<>v<<<v<<<<v>>>>^<^^^^>v<^^<><v>v>v<v^>vv^>v>v<^>^v^<>v>>vvv>^^><^vvv>><>>>^<<^<v<>>>v^^><v<v>>^><>v<^^v^<<v><>^<>>><^v^v>>>^vvvv^<><<<v<^>>v>^v^<v<v<<^<<v^vv^v>v<v<>>v<v^<<<><v^>><^<<^>^^><v>v<^v^<^>v>^<<v>v^<>v^<>vv^<>^>^>v^>^vv<>^^<<>>v<>^v<><v^><><<<vv>v>v^>vv^><<<<v>^v<><>^^<vv>v^^v^^^<v<^^><v^v<>><v<vv>^<>>><vv<^v<<>>^><>>v<v^v^>>>v<<>v<<<<<<<^v<<^^^v<^v<>v^^<<<^<>>v^vv<v>^<^^<^^<<^>vv><^<^^v<<<^><^v<^><>v<vv^>^v^^>>><<vv^^v><^<<^<>>^>>^<<<<v^vv<>>>v>^v>><>v>>v>><>v>><^^><v>^^vv<^^<^>vv><<^>><<><v>^vvv><^v^>vvv^>>^<><^>^<<>>v^v>v<<>^>>^>v<^^<^<<>^^v<vvvvv^^^<^<>^^v>v<>^<^^<<v>v^^vvv^^v>^vv<v^>^<>v<^v^>^<v><v<<<^v<v<v^^<vvv>vv<<vv>v^<<v<^<vv><^>^><^^<^^<<v^^<v^v<v^^^^>^>vv^<>^<>^>^^<^v><<<^>vv^vv>v^v<>^^v^<^^^vvv^><v^<v^^<v<>v^<><>v>vv<^v^>>^v<^^vv>vv>^>><<<<v^^<^><>^><>>v<>>v>^v<^vv>^^>^<^<<v^>>v^v<^^v<vv<^<><^^>^^<>^^^<vv<v<<^^>^>^vv<^>><^<vvv^<>>vv^><v>v^>^vv>^>v^^<>>^v<>>v<^>^v>vv^<vv<^^>>^<v>>>>vvv>vv>^><^v<<<>^^v>v^v<^^^v^^>^><<^^>^<v>><^^^^^<v<vv<v<^<>^^<^v<^>>vv>>^v^vv<>><>^>>>^<v>^^^^><^<<<v<>^v<><vvv^<^^>vv^>>v<vvvv><v^v><^vv<^v<><vvv<vv>v<>^v^<<>>>>v^^>^vv<<vvv<^^><v><><<>v^v<^<^>><vv>^^><^>^><<><v<^v^><^<><>vv>>>>^><<^^^<^v^>^>^^>^<^><v><^^<^^<>><><v>><<<>^>^^v<>^<<<v>>vv>^>>^>^<>>vv<^^vv<>v<>^^>^v<v^^^^v<>^<v>v^v>^^^<v>v<<<^vv^><>^<v>>^^vv>v^<<^><>>vv^^^^^>v>>v<<<>^<vvv<<><><^v<^v<^>^<>^vvv>^>v><<<vv<>v>vv<v<<v>^<^^>v^v>^<^v^<<vvv^^<>^v<<^>^<><>^^<>>^^<^v^<^<v<><<^><v<>v^^>v^v^^^<^v<<^v>^>>^^^^^><<<vv^>>v^><v^^vv><>v^^<^v<^<v^^><<v>v^^^><^^^><<<<<>^<<^<>>v<<v^v^^v<<>^<vv>>><^^^<>>>>vvv>v<>>>v^v^v<^<<^>^<<>v>>^>^^><^><<^v^^<^<>v^v>vv<>>>>>>v<<><v^<v<>>^^>v<<<>^<<v><^><<^v>vv>>>><><>v^<^v><v^<<<<^v><^>v>>^^^v<^>>^>>v<<^<<>vvv>>^v<>>^v><<<^v^v<><v>^vvv<v<v>^^^<><vv^<<>vvv<v<^^v^^><v<^v<^v^<v<^>^^^>>v>^<v^>>^<><<><vv<>vv>^v^>>^<<v<^^v>v<v<vvv>><><<><vvvvv<^v<^>^^><>^<<>^v<<>>v^vv<<>^^v^v^v><^>v>v<^<<^<^>vv>^v<<^>^>>v^<<v^>v^^v^^<v^v>>><vv><<<>^v>><><v<vv<^>v<>><^v>^^v<<<<^v^vv<<<<><><^<^<^v><<^^v^<<<<<^^><^^>vv<v<^<v>v<^><><v<>vvv^<vv>v^>^>^^^v<<^<^^>vv<v^v^v>^vv^><^v^<<>v<^^>^vv<<>^<<><^>v^<<^<>v><><>v<<^^><^^^v>>v>^vv<v^>>^v^^<><<<<<^>^v^<^<^^>^vv<^>v^^v^<>v<><v>v^v>vvv><><<><>vv<vvv^v>^^>^^^<><^>^^^>v<vvvv<>vv<v<v^^>><>v<>>v^>v^^vv^>v>>><v<<<<v<^v>><^^>^v^v<v^v^^^vvv>>>vv<^>><<<^>><^<^>^<^>^>>v^<^<>^<^^<><vvv^^<>^<>>><<v>^<^<v<<><^<<^><^^>vv<>^^><v^v<vv<^<vvv<<^>v^>>v>>>v<<^vv^<><>>>^^<^v^>>^>>><<v<<^<vv><^<>^>>^v>>><^^^<<<vv<<v<v>^vv><><<>^^^<>^<vv^<^<<v>^^><vv>><>>>^>vv>^<^<>>^<^^><v>v^><v>vv><><>>><><<^^v<<^v<v>vv<><><<^v>^v<>^<^^^v^>^<^><^v>v>^v<>><^^v^^^^^<><v<>>vvv<v^^<>v>>>>^<<><^v>vv>>^^><<><><^^^<^<^<<^v>^^^><v>>>>><<v<v>v^^^<>>v<vv<^<>v^^^v<><^>v>><<><>v<^><<>>><>v>^<>>^>v^v<<<<>^<v^vv^>vv<<><v^vv<v<v<<>>>>>vv<><>^<^v>vv^<<v<^v^^<<^<<^^v^>>><<>^<>><^>>><v<>><<>^^>><<<^^^^^v>>^<<>>vvvv<^v<v^^<^>^vv<vv<>v<<<^><>>>>vv^<^v>v<^<>^v>>^<^^v^>>><>^^<^v>>v<<>vv<vvvv<>vv>^><>v^<>^<<^vv<v^^v<vvvv><^>>^v^>^^<<<^>>^^>^<^^<^<<<v^<^^v<<vv^<<^^^vv><v<vv^>v^^v<v>^^<^v<^>>><<>vv<<^><<v^v^^^v<vv>^>vv<^>>^<v<>vv>>>^>>><<v<^<>^<<<>>^<<>><^<<^^^>>v^^>v<<<>v>v>v<v<^>^<>>>^vvv><<^^<<><v<><^<v<vvv>v>>>>vv^^v<v<^<^><v>^v<<v<vv>>v>v<<<<><<>vv<><^^^<>>v<v<vvv><v^<vv^>>><v^^<>>>^^<><^<^v^><vv>>^^v>^<<v^>v>^^>^v^<v<^<v^v><>>v^^<^v^^<<>^^>v^^>><<<<^<^^v>^^v>v<<vv^^vv>^>v^<v<v><>vv>>^<v^v^<v<^>^v>v^^>vvvvv<v><<>vv>vvvvvv>>v>>^^^<v>vv^^><<v>>v^^^^v>vv>v<^v>>>>^>^><v^>^<v<vv>v>^>><v>><<>>^vv<vv^^<^^>>>>><><<^<v<><<v>^><^vv^v>>>>>v>^>^<vv>^v^>v<^v^<^<<vv<<>v<>>^vv<<>^v^v>><><<>>v^^<<>^^<v><>v<<^^<^^>^^>^<^><>>v<>>^^<^>><<<v<>>>^v^>v>v<<^^<<^>v<v^>>v^^v^^<<>^v>v><v^>v<^^>^<vv><vv^<>v<><^<<<vv<<v>v<^<<<<^^>v^v^^><<><^^^<v>v^^>>>vvv><>vv<>>^^v^v<<^>v^^v^>vv>^<<v<^<v^>^^<<v<^^>^v^^<^^v<<>>vv<^>>^><><>v>>v<>^<v^^><<>>>

** day3-common (test)
   #+name: test_set_day3
   #+begin_src python :results value :cache yes
   #
   data="^v^v^v^v"
   return data
   #+end_src

   #+RESULTS[c125a478fa039d3e9efc2685f2200a22fbe31880]: test_set_day3
   : ^v^v^v^v

   #+name: day3-com
   #+begin_src python :results output :var data=test_set_day3
     import numpy as np
     class santa_walker():
         def __init__(self):
             self.cur_pos = np.zeros(2, dtype=int)
             self.hist = set()
             self.hist.add(tuple(self.cur_pos))
         def move(self, arrow):
             move_dict = {
                 'v' : (0,-1),
                 '^' : (0, 1),
                 '<' : (-1, 0),
                 '>' : (1, 0)
             }
             self.cur_pos += move_dict[arrow]
             self.hist.add(tuple(self.cur_pos))


   #+end_src

   #+RESULTS: day3-com
   : 2

** day3a
   #+name: day3a
   #+begin_src python :results output :var data=init_day3 :noweb yes
   <<day3-com>>
   sw = santa_walker()
     
   for s in str(data):
       sw.move(s)
   print(len(sw.hist))
   #+end_src

   #+RESULTS: day3a
   : 2572

** day3b
   #+name: day3b
   #+begin_src python :results output :var data=init_day3 :noweb yes
     <<day3-com>>
     sw = santa_walker()
     rsw = santa_walker()
     ii = 0
     for s in str(data):
         ii += 1
         if ii % 2 == 0:
             sw.move(s)
         else:
             rsw.move(s)
    

     print(len(sw.hist.union(rsw.hist)))
   #+end_src

   #+RESULTS: day3b
   : 2631
* day4
** init_day4
   #+name: init_day4
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/4/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[ce53e9801a69df39b8a1f3f2d459a60cd9c4721a]: init_day4
   : iwrupvqb

** day4-common (test)
   #+name: test_set_day4
   #+begin_src python :results value :cache yes
   #
   data=1
   return data
   #+end_src

   #+name: day4-com
   #+begin_src python :results output :var data=test_set_day4

   #+end_src

** day4a
   #+name: day4a
   #+begin_src python :results output :var data=init_day4 :noweb yes
   <<day4-com>>
   #+end_src

** day4b
   #+name: day4b
   #+begin_src python :results output :var data=init_day4 :noweb yes
   <<day4-com>>
   #+end_src
* day5
** init_day5
   #+name: init_day5
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/5/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[defc243aae412c208f11624c1647fd39f7a5923b]: init_day5
   #+begin_example
   rthkunfaakmwmush
   qxlnvjguikqcyfzt
   sleaoasjspnjctqt
   lactpmehuhmzwfjl
   bvggvrdgjcspkkyj
   nwaceixfiasuzyoz
   hsapdhrxlqoiumqw
   lsitcmhlehasgejo
   hksifrqlsiqkzyex
   dfwuxtexmnvjyxqc
   iawwfwylyrcbxwak
   mamtkmvvaeeifnve
   qiqtuihvsaeebjkd
   skerkykytazvbupg
   kgnxaylpgbdzedoo
   plzkdktirhmumcuf
   pexcckdvsrahvbop
   jpocepxixeqjpigq
   vnsvxizubavwrhtc
   lqveclebkwnajppk
   ikbzllevuwxscogb
   xvfmkozbxzfuezjt
   ukeazxczeejwoxli
   tvtnlwcmhuezwney
   hoamfvwwcarfuqro
   wkvnmvqllphnsbnf
   kiggbamoppmfhmlf
   ughbudqakuskbiik
   avccmveveqwhnjdx
   llhqxueawluwmygt
   mgkgxnkunzbvakiz
   fwjbwmfxhkzmwtsq
   kzmtudrtznhutukg
   gtvnosbfetqiftmf
   aoifrnnzufvhcwuy
   cldmefgeuwlbxpof
   xdqfinwotmffynqz
   pajfvqhtlbhmyxai
   jkacnevnrxpgxqal
   esxqayxzvortsqgz
   glfoarwvkzgybqlz
   xdjcnevwhdfsnmma
   jyjktscromovdchb
   pvguwmhdvfxvapmz
   iheglsjvxmkzgdbu
   lwjioxdbyhqnwekv
   zcoguugygkwizryj
   ogvnripxxfeqpxdh
   hkvajhsbfnzsygbm
   cnjqeykecopwabpq
   wojjtbcjinoiuhsj
   kpwpvgxbyzczdzjq
   wrvhylisemlewgzk
   uiezkmnhilfzahtm
   mucteynnuxpxzmvt
   zaiwbgxefusfhmst
   apptbogpxivjwink
   qryboarjtwjhjgjb
   irehxupgyseaahzd
   fobstqxguyubggoh
   ysriumfghtxtfxwe
   auchdmasvfeliptw
   mztuhefcrnknyrdl
   tyjmkhihbwabjtaa
   yquzkdtgsljkaebw
   almvdvofjtkyzbmd
   emqftiuqqpdwwbrv
   hrrhmqfpepvbawvw
   atrkgykycvgxbpyb
   dhthetnealksbdan
   zzqafhgicubptiyo
   qdtaieaziwhbttnw
   kyskgapdgqrtrefw
   edwzlpqztpydmdlr
   awszjnlmvlyqsuvl
   kcrtmtshtsgixvcp
   jtaskgkijivbbkri
   mmggfwapsetemiuj
   itagrrnjbnmhgppd
   uqmbezechbrpbnqq
   nnyimvtascflpzsa
   knqeimypkdttyudj
   vgoiyvtvegwyxjjd
   qubzdxsbecktzrho
   zehojtvktsbbxijb
   xepmjrekwcgoxyoh
   bnptxnocbpbqbyeq
   sfvynsywscbnymos
   dsltfbpcmffbluba
   kncrlzlmkikylppa
   siwudrvmildgaozv
   jhhefbvbvneqzvtc
   lqjgztxitbuccqbp
   himmwlbhjqednltt
   vwognchyertnnfil
   eejakhapkbodrntf
   qxuijkkhhlskgrba
   aankpfxxicfpllog
   vuxykvljyqexfhrn
   epgygflbxlbwybzq
   zuxmwvetmvcszayc
   xttwhfqmemgtjnkf
   hftwldmivyfunfvl
   bejlyxfamzliilrj
   zkehazcxyyvtrxti
   dsgafehmcfpycvgz
   igremmqdojqdvwmb
   swnjzvmhcslvkmiw
   fchzbfbmtqtxmaef
   xwjmyyrlznxrcytq
   brwcwzpcvbwdrthl
   fvrlridacsiojdmb
   mhsturxdlmtxozvy
   usxvqyrwywdyvjvz
   gwazuslvmarfpnzm
   rgkbudaqsnolbcqo
   dpxvlbtavdhdedkj
   nnqmjzejhodyfgyd
   ozoazxkfhujgtzvy
   psdgvhzdiwnuaxpl
   tznkilxpogbzgijz
   wnpytcseirtborhh
   lhauurlfsmagfges
   oqfbzixnlywkzwwy
   yoehapoyjpakziom
   vtjftdcsfdzbmtrn
   zcshfnodiwixcwqj
   wapbxpaxgjvtntkm
   qfyypkyvblrtaenh
   bsxhbxkovgukhcza
   kitdmvpiwzdonoyy
   slkbhxmehzavbdsf
   dovzjouqkzkcmbkl
   qpbigdcqkfnfkxvq
   eaiaquhnesvtcdsv
   mhbezlhqojdsuryj
   dqprkkzxlghkoccx
   xqepmorryeivhrhm
   frwmrjpezwmjflvf
   gjpfgwghodfslwlf
   fzyvajisdjbhfthq
   pvzxkxdscdbilrdb
   mtaxmqcnagmplvnm
   rlyafujuuydrqwnc
   gvqvrcxwyohufehq
   lmrkircgfrfusmfd
   ovlpnkxcpimyaspb
   xhyjremmqhdqywju
   pxfczlhpzbypfarm
   utjhprzhtggausyp
   utzkkzlnyskjtlqh
   cecbcnxpazvkedic
   xwvoaggihrbhmijq
   krredhmtwlfmyagw
   lwfhxgbknhwudkzw
   vyczyvuxzmhxmdmn
   swcoaosyieqekwxx
   waohmlfdftjphpqw
   gaclbbfqtiqasijg
   ybcyaxhluxmiiagp
   xgtxadsytgaznndw
   wzqhtjqpaihyxksm
   fdwltsowtcsmsyhm
   rpoelfbsararhfja
   tswgdacgnlhzwcvz
   xjgbhdlxllgeigor
   ksgthvrewhesuvke
   whgooqirdjwsfhgi
   toztqrxzavxmjewp
   hbkayxxahipxnrtl
   lazimkmdnhrtflcu
   ndoudnupbotwqgmr
   niwuwyhnudxmnnlk
   hlmihzlrpnrtwekr
   wzkttdudlgbvhqnc
   rfyzzgytifkqlxjx
   skddrtwxcyvhmjtb
   mljspkvjxbuyhari
   xwkhozaoancnwaud
   nookruxkdffeymdz
   oiqfvpxmcplyfgoa
   qoxggshmrjlzarex
   lsroezewzkrwdchx
   nkoonmvdydgzspcl
   lygxeqztdqklabov
   jempjyzupwboieye
   hpdaqkhjiddzybly
   cvcizjlnzdjfjlbh
   vaaddsbkcgdjhbkj
   pjxmtxoyrkmpnenf
   ujqdvyqnkbusxlps
   miyvzkzqploqaceb
   gapcsbkulicvlnmo
   xqpcyriqhjhaeqlj
   ipumdjwlldzqhmgh
   swdstecnzttmehxe
   ucmqordmzgioclle
   aywgqhmqlrzcxmqx
   ptkgyitqanvjocjn
   wcesxtmzbzqedgfl
   rnetcouciqdesloe
   chpnkwfdjikqxwms
   onpyrjowcuzdtzfg
   tydnqwaqwkskcycz
   dhamguhmkjzzeduy
   oecllwyrlvsyeeuf
   gsukajpoewxhqzft
   sgdnffdixtxidkih
   pqqzjxzydcvwwkmw
   wnjltltufkgnrtgm
   hylaicyfrqwolnaq
   ovfnugjjwyfjunkm
   xknyzsebmqodvhcl
   uwfmrjzjvvzoaraw
   zaldjvlcnqbessds
   zphvjuctrsksouvz
   ceqbneqjwyshgyge
   wmelhaoylbyxcson
   nghuescieaujhgkj
   dhjmflwwnskrdpph
   exvanqpoofjgiubf
   aidkmnongrzjhsvn
   mdbtkyjzpthewycc
   izctbwnzorqwcqwz
   hrvludvulaopcbrv
   mrsjyjmjmbxyqbnz
   sjdqrffsybmijezd
   geozfiuqmentvlci
   duzieldieeomrmcg
   ehkbsecgugsulotm
   cymnfvxkxeatztuq
   bacrjsgrnbtmtmdl
   kbarcowlijtzvhfb
   uwietqeuupewbjav
   ypenynjeuhpshdxw
   fwwqvpgzquczqgso
   wjegagwkzhmxqmdi
   vocvrudgxdljwhcz
   nnytqwspstuwiqep
   axapfrlcanzgkpjs
   lklrjiszochmmepj
   gxadfpwiovjzsnpi
   qidsjxzgwoqdrfie
   wgszciclvsdxxoej
   kwewlmzxruoojlaq
   ywhahockhioribnz
   ucbqdveieawzucef
   mdyyzmfoaxmzddfv
   hsxnabxyqfzceijv
   vivruyvbrtaqeebr
   jxfeweptjtgvmcjc
   mmypqxmpurhculwd
   mpiaphksvctnryli
   xqzqnuxmuzylkkun
   fndmtefjxxcygtji
   dnorqlldvzqprird
   nutokyajmjpwjaqu
   vlupfperqyqkjcaj
   dgihjeokrphkpdnk
   nvbdyrlheqzixuku
   mhrkntnxvsmvrpka
   kvhkyanlhhymwljf
   fhipumtegqfgeqqw
   vpfjgveycdefuabu
   kzincljffncylcsf
   tsezxymwmjtyegqw
   wxhcdrqedkdcwxli
   ueihvxviirnooomi
   kfelyctfvwyovlyh
   horzapuapgtvzizz
   iiqkdpmfvhwwzmtj
   rsaclclupiicstff
   quwkkhrafypkaoum
   gyrgkgmwqfkeudfe
   noydhbqacwptyfmy
   efwwuipzgtkwffhf
   suyojcitomdxsduh
   lbcxnsykojkufkml
   zpglsvoutvzkgdep
   usgrufyvgsbsmbpr
   katrrwuhwvunjqor
   btngwrpcxoyfbgbc
   bxjscjdiowjrkpns
   nwxvnfrnlkgqxvhf
   ikhyqkvljucgdlag
   xibnxsjopmxvflkl
   mzplumcfivqcjqnz
   jqflcxoxzlbwlxry
   fcscvmfepdxrshxe
   wlpffwunffklzbuc
   emvrlqajjgwzfmle
   rhaheurtzrfoqkyq
   ifuuhpxmadaysfsx
   ncyfvleyzqntpcoo
   zeogmyaqccmtvokd
   jqppbzebppdnpurn
   xixarswxsiwjzgni
   ezruwzajsoombphs
   hmiqfeizyprielxf
   jnaoxljnftymsfey
   extgzrxzovlsixnf
   yhyfmovvlrwoezsv
   ffnybaolppuzpjym
   pqowimdiusccaagn
   jgceiosiihpjsmnu
   hkoexeaopebktngx
   njhzuvsygymejqav
   yjkgcclgtvushcfk
   gmbjxhnkkxlihups
   pdlwysadiebsidjz
   omrwmgzulfoaqros
   ofvvgdezwvcffdcy
   otytpuklhxcpxhgd
   eyfaosxdauumvlux
   mvdthjfstrlqlyuo
   mdgdchgnlxaxspdm
   bakjezmhbwqxzevd
   msakswaphdwaodhg
   vjcqscgdbnsxdllh
   jjywaovewbuzreoj
   nqvplhwacylifvwk
   lpwmpixbxysmsign
   flcvbpxrchcpbgcb
   qjpkeuenenwawlok
   bnqkflfmdmntctya
   fzsgzpoqixvpsneq
   icwfdisutoilejld
   relchofohnkwbumi
   aljalgdaqwhzhfwr
   cahkvnwnbwhodpqs
   dnrzeunxiattlvdm
   nsmkhlrpwlunppjs
   mqqsexlwfqnogwub
   tfavelkqrtndpait
   ooguafrnmprfxcnz
   ntynkiordzxtwrqa
   rkkyzlxekqqlkvym
   ofxcivdnwcmgfnme
   ywotqwbrqxlrnobh
   nrbbiypwhrqihvev
   flqsjixxtydheufs
   lcfrfzypstrqctja
   hyzbuzawuzjrynny
   exfbywcnstebnvmq
   vydzwnbmcihvqrnj
   qmwqaaylinzrdmiw
   lpxpztpvfggspeun
   lhxmqqbracsuyrfm
   zgkwsrabaseidbrw
   yjlmbhbqsqgszsun
   mqfzqtbxtuteabtd
   izomzdmcqmfrevwd
   iqijrlqurdwrkoln
   fxhqzpgoxxjkkhql
   oulwontmgrjeopnk
   edaigfydjexvzzvj
   vjhybiklxpxjqpwc
   ypxfbfnpbmqmwtte
   xzvcsgasztrxdzud
   rpulqmobptfarboo
   palacmdijxzzykrf
   jmllwukplufohiby
   dnswayomusiekfmy
   sxbrjqtqgzzwhcfo
   lylvndsgbnbqiejm
   jaxxhoulxnxnaenr
   nblissutfazbcpwn
   zmlsjszzldvbiacr
   kewojtlchfkclqwk
   eqvfjasddggvfame
   yibzqlvxtraxpdon
   dgnbxsbmdrtyvaac
   uoxrcxfimhgtxqhy
   xfdxalrwcwudlviq
   xmtbdklqptoswpwl
   zezyopzdztdjerfl
   xuzluhjsqvhytgbc
   qdjtmeckispmgzki
   phakupesplzmmmvc
   gpuoqfffumzszybn
   bhywxqkrrlwuebbw
   ibvwgoyvelzenkzl
   ncohvvbmiekbaksa
   fzuvqzvxvdbeirrp
   lshtzniokucwojjd
   punrduvlnrulkium
   gnfpikidnfobrrme
   vxkvweekmnvkzgyl
   rhydssudkcjlqgxn
   cjtqvlaahohcgumo
   jwzmfyinsfwecgcb
   blpeseqhlzfilpuf
   jvtpjkyokzcvagon
   qjomincbcobjczpe
   ugsyzkzgdhxtmsfz
   hleaqgwzqjwajcra
   coumfghptpnxvvov
   hqpnbupnzwpdvgqd
   cpouyodqxgviasem
   lljvxeyozckifhfd
   huqtnvutdyfgwtwa
   yenlveuynmlmmymu
   ojdyufkomxiwjmbf
   spjzgvcwvzgffjkk
   vxykmjhyvmhyssbp
   tazdeqggfcjfvwwn
   uumwcngwcytvpufx
   avovuzkrevloneop
   owczrtbnrvjfemkt
   hzpugcanaxyvaokj
   iishlodnxvjtgzyn
   qosdonclrnxirham
   eonqlnwevahydddg
   ryqmnuikftlxuoqy
   whqepbcwabzbthha
   vekisvnwhgpyemxr
   lrwxzoamnvpnlhap
   ywepvqthnorfswjv
   evqwvsoazmwyypjy
   bgwoojddubppmjxf
   jypkfrthzgtyeddi
   tynabbhfjzkrqsju
   adxstbfqheuqbcuk
   gqwqiocdyqoiblrx
   ybuddlyuskdlegxv
   luwynbsmpgyeqsbr
   ltyqgqoyljibqndo
   jaedpajzphfybajh
   epglnrxofptsqvmy
   zjdpxkngfkstxbxh
   ekegphcwanoickfu
   cqvhuucvejqirvfs
   uqudnnqumsqcgefo
   qnzunermlnpcfflo
   ovyxaniqaawzfuxx
   djekxcezjowdhopq
   bwtwbmdehrhpjnlk
   nilsnlacerweikfa
   hyrigsrmsrzcyaus
   gvmdmgddduylmxic
   ewzovdblhmjgjwsk
   ojjfsknlonzguzlq
   yjgfruvpjvlvrvvq
   cyoryodwyhzwprbv
   crsjclrurcquqgut
   sjhfhobwtojxcmem
   ibxfjudilmdeksea
   uqbhdbjoeupyhbcz
   uqbxigzxuxgmjgnw
   jashafmtzrhswirg
   dexiolovaucyooka
   czjbwwnlwcoqnoiu
   ojigosazigfhttjc
   zfiqtgrqbmftknzn
   dlzbmvmolssbqlzl
   sgmchcurrutdtsmw
   scdwjqsdohcdrwry
   cgtdvecqwplpprxn
   iiplenflfczaktwi
   wmgnwfxfcjhyeiqg
   giihshowtcatecvl
   nqhzfincclumvkaz
   kxstpzgdfvepionc
   agbhxcijxjxerxyi
   hmgfqevgdyvisyvs
   tthakmvpowpvhtao
   ottalcghygpaafbo
   aplvozayycremgqg
   dbjxlnaouxqtdpfz
   peeyallzjsdvpalc
   ndtdjyboixuyhfox
   llabnbcobexfoldn
   cweuvfnfyumbjvxr
   ewkhhepaosalnvkk
   pivyiwsiqpwhagyx
   auzsnwdcerfttawt
   grbfrekupciuzkrt
   byfwzadtzrbndluf
   lluypxjeljzquptk
   pskwsnhqanemtfou
   sxvrtqqjdjkfhhrm
   ulsmqgmshvijyeqh
   qigofesfhekoftkf
   zhatniakqtqcxyqa
   uuczvylgnxkenqee
   mlitvtuxknihmisc
   srrtrxdvcokpyfmz
   osispuucklxcfkeb
   vqhazlaulmnpipql
   umkiueljberqhdig
   knvpbkbvgoqzwprp
   nbsocqikhuvsbloj
   wjnpepjkzkednqbm
   agbhmytsofuyqcor
   gvogzhkkpxyfecko
   ardafguxifeipxcn
   yiajcskbgykyzzkw
   sejunbydztyibnpq
   dqrgfggwcnxeiygy
   xnqqwilzfbhcweel
   jjtifhlvmyfxajqi
   gwszrpgpmbpiwhek
   kydzftzgcidiohfd
   efprvslgkhboujic
   kecjdfwqimkzuynx
   rildnxnexlvrvxts
   dlnhjbqjrzpfgjlk
   qluoxmzyhkbyvhub
   crydevvrjfmsypbi
   dosaftwumofnjvix
   pwsqxrfwigeffvef
   nzyfmnpwqyygjvfx
   iccbckrkxlwjsjat
   bmputypderxzrwab
   bhuakynbwnlreixb
   qmrzfyqjiwaawvvk
   juvtixbkwyludftn
   zapmjxmuvhuqlfol
   paiwrqjhpjavuivm
   tsepfbiqhhkbyriz
   jpprewufiogxoygk
   mmapyxbsugcsngef
   pduhmgnepnpsshnh
   aetndoqjvqyjrwut
   fnfvlorhwpkkemhz
   gedfidpwvoeazztl
   beclvhospgtowaue
   wsclsvthxustmczm
   tjbxhnpniuikijhe
   rhetyhvfcemponeg
   mavonujurprbeexi
   argbrpomztrdyasa
   bzvtffbtygjxmkvh
   maqyqkhsqgzfzvve
   seeirbiynilkhfcr
   wxmanwnozfrlxhwr
   dieulypsobhuvswb
   nxevassztkpnvxtb
   jclxuynjsrezvlcy
   xlolzyvgmwjsbmyf
   tguzoeybelluxwxc
   fkchoysvdoaasykz
   cyynwbfcqpqapldf
   rhifmzpddjykktuy
   ndvufsyusbxcsotm
   txutnzvdsorrixgg
   qjoczhukbliojneu
   ufhwujotncovjjsz
   kclsgsdwcrxsycbr
   yscwmlrdaueniiic
   nxhivrovpkgsmugb
   fdxqfyvwwvgeuqkv
   femtamfylysohmpr
   amsyzslvyxsoribh
   nhmqxncwsonhgbcz
   uomqsvcbpthlmcue
   kxtfapcqrnjkkslj
   xtieihonlfubeync
   adpcjqxgydulchgj
   cjynnzsmmujsxxpd
   neeapmzweidordog
   szoivgqyqwnyjsnk
   uwgrtzaqezgphdcu
   ptpgttqxocjwxohi
   fhltebsizfwzpgpf
   emmsazsidspkhgnh
   dxcprkbcjeqxqzgn
   tpxzqwxbzwigdtlt
   afsmksnmzustfqyt
   xyehnftstacyfpit
   vcrfqumhjcmnurlw
   rrznpjzcjgnugoch
   gbxnzkwsjmepvgzk
   jwobshgwerborffm
   zmuvfkhohoznmifs
   buyuwgynbtujtura
   bevncenmpxfyzwtf
   hqqtcrhzfsrcutjh
   kbpzshllpiowepgc
   alspewedcukgtvso
   xvsvzzdcgjuvutrw
   pmwulqraatlbuski
   abuzsiinbueowpqn
   oedruzahyfuchijk
   avhcuhqqjuqkesoq
   azqgplkzsawkvnhb
   rjyoydogkzohhcvx
   aezxwucqvqxuqotb
   kxobnsjvzvenyhbu
   nnjoiilshoavzwly
   aijttlxjrqwaewgk
   cvsaujkqfoixarsw
   zngtoacpxcsplgal
   qhkxliqtokvepcdv
   aixihrtdmxkfvcqw
   owbgdgdymxhhnoum
   tajsagmruwzuakkd
   ckrfduwmsodeuebj
   alfdhuijuwyufnne
   xpchlkijwuftgmnm
   rwcrvgphistiihlg
   xdaksnorrnkihreq
   akeschycpnyyuiug
   rgputhzsvngfuovz
   lerknhznuxzdhvre
   mqiqmyladulbkzve
   csnmupielbbpyops
   kwgrwgmhfzjbwxxz
   npwtvbslvlxvtjsd
   zxleuskblzjfmxgf
   hexvporkmherrtrn
   rhtdhcagicfndmbm
   qhnzyuswqwoobuzz
   dpvanjuofrbueoza
   kjcqujmnhkjdmrrf
   gholddsspmxtpybg
   jihlvyqdyzkshfsi
   zuviqmuqqfmtneur
   kzexjowatvkohrtx
   wgijnfhibsiruvnl
   zevkrkmhsxmicijb
   khxrcteqourjvoxa
   ylpxlkcnenbxxtta
   zrfsvctbojjkpvtw
   nlzbudxibnmcrxbt
   cqnscphbicqmyrex
   ywvdohheukipshcw
   riwatbvjqstubssf
   idlztqqaxzjiyllu
   sdpdgzemlqtizgxn
   rjtbovqlgcgojyjx
   fnfrfwujmjwdrbdr
   osnppzzmrpxmdhtj
   ljhwngclvydkwyoe
   chwqkrkzrvjwarat
   jmydkwpibkvmqlgs
   zvhfmbxnlxtujpcz
   jsnhsphowlqupqwj
   fzhkkbpasthopdev
   jerntjdsspdstyhf
   gctwmaywbyrzwdxz
   xemeaiuzlctijykr
   xulrqevtbhplmgxc
   yfejfizzsycecqpu
   gboxrvvxyzcowtzm
   lpvhcxtchwvpgaxp
   wdiwucbdyxwnjdqf
   qgwoqazzjlvnjrwj
   prtlnkakjfqcjngn
   fagvxsvjpuvqxniz
   xacmxveueaakfbsm
   ginvtonnfbnugkpz
   qpvggsppewfzvwin
   reoqnlzruyyfraxa
   kolwtqhifjbbuzor
   vrkcywvdhdprztww
   ngdvyfmvjqhbzbxt
   rooxeoilqzqjunmp
   efxmdprtogtxgyqs
   qrhjuqndgurcmwgu
   ouitjprueefafzpl
   kirdwcksqrbwbchp
   fpumsmogojuywezo
   lgjrgykywugzjees
   xigioqcpjabpbdas
   ewkhuprpqzikmeop
   fgrgxsqeducigxvr
   bclkursnqkzmjihl
   jozidniwvnqhvsbc
   oghcilcyozrmmpta
   xbgmaungzcpasapi
   iqowypfiayzbcvhv
   opdehgwdgkocrgkf
   zfzvdjeinlegcjba
   vhakxvlcayuzukap
   xyradgyiebpevnwe
   eamhtflgedwyshkn
   igteqdgchjeulfth
   kwsfkigxzpbgdxod
   vapnpsbdboiewpzp
   wbuqhjsngxpqshen
   vxxilouxuytitwgm
   cpnwlkwnkeanqnet
   wdmbtqvvlowftvgb
   wjtmcecpyqzwpbqg
   jnxmoxdhvsphcdeg
   wabxfxpotoywwodn
   mwbsoxzlqpqobvvh
   coktshbyzjkxnwlt
   rzhnggpslwzvyqrp
   dgzuqbzarbutlkfx
   wunajaiiwgijfvjh
   uotdbcgmsvbsfqlb
   kxdtlgmqbccjqldb
   ngmjzjwvwbegehfr
   cvpsabqfpyygwncs
   wqluvqlhdhskgmzj
   rbveperybfntcfxs
   fbmoypqdyyvqyknz
   zxpgzwnvmuvkbgov
   yexcyzhyrpluxfbj
   ltqaihhstpzgyiou
   munhsdsfkjebdicd
   plecvjctydfbanep
   kjrxnnlqrpcieuwx
   zbcdtcqakhobuscf
   kgovoohchranhmsh
   llxufffkyvuxcmfx
   tgaswqyzqopfvxtw
   kojcqjkdpzvbtjtv
   xggdlkmkrsygzcfk
   vvitpsnjtdqwyzhh
   gcqjuwytlhxsecci
   vbsghygcsokphnrg
   vejqximdopiztjjm
   hudqtwmwkviiuslp
   vwswfvpcwwpxlyry
   gxmfiehdxptweweq
   qjmekjdcedfasopf
   pqyxdxtryfnihphf
   felnavctjjojdlgp
   hbimufguekgdxdac
   dhxhtnqgfczywxlr
   pssottpdjxkejjrh
   edieanguabapxyig
   sciinanyqblrbzbb
   irxpsorkpcpahiqi
   qsxecaykkmtfisei
   ivfwlvxlbnrzixff
   hqxzzfulfxpmivcw
   vvbpaepmhmvqykdg
   cetgicjasozykgje
   wuetifzdarhwmhji
   gaozwhpoickokgby
   eldnodziomvdfbuv
   favpaqktqaqgixtv
   twbcobsayaecyxvu
   lzyzjihydpfjgqev
   wnurwckqgufskuoh
   fxogtycnnmcbgvqz
   aetositiahrhzidz
   dyklsmlyvgcmtswr
   ykaxtdkjqevtttbx
   kfmnceyxyhiczzjm
   nnizopcndipffpko
   yjmznhzyfinpmvkb
   sljegcvvbnjhhwdd
   zmkeadxlwhfahpwg
   rwvcogvegcohcrmx
   aguqwrfymwbpscau
   vlusytjagzvsnbwe
   smvzhburcgvqtklh
   rfuprvjkhazrcxpv
   megqlnoqmymcrclc
   gvldhkewtmlwqvqv
   awynhvtyziemnjoa
   voprnvtnzspfvpeh
   dhlguqwmunbbekih
   goayirdhnjrfuiqi
   eoghydfykxdslohz
   chpippjykogxpbxq
   hqbycjweqczwjwgf
   pvefsrvwumrlvhmt
   eghwdovaynmctktk
   crwkxoucibumzawc
   bzbtahvhkdigvvtj
   bnbptgihhfubxhho
   ddqmbwyfmfnjjaro
   gvtswqyzazihctif
   vmqctjpgadxztqqb
   dgnndowtpeooaqqf
   sxdvctfdtalufxty
   ylgeexosibsmmckw
   sxplpyskbpqnojvw
   coarhxtsvrontyeg
   fyoaurggjupvzvlv
   jlyrkqsiwuggvjem
   uwbsjoxonreuucyi
   gihuqvwxovbgokes
   dxzaaxupbcgnxcwf
   gidrgmvyrlqqslve
   csflmlvqmonoywpx
   jkxkpixlythlacnk
   ejkarcdkdslldugv
   dbzmsusevohhjkmr
   cbrqzualjpdtworc
   kpgidqlmcbpfmmwu
   zwghjuofexfowqam
   ncdlxmcrsmsocetz
   kfprzqacefifjkbd
   swwzivrxulkhvldc
   wgqejhigbjwunscp
   rsstnwcyybfauqxu
   qhngfxyhdqopyfgk
   zrndpyyejsmqsiaj
   xxknxwpvafxiwwjc
   mmaahwgoiwbxloem
   tabacndyodmpuovp
   yriwomauudscvdce
   duvyscvfidmtcugl
   mgipxnqlfpjdilge
   imeeqcdetjuhfjnw
   dvkutrdofpulqkyh
   jefvtlktxegpmbya
   iyzudqgpvlzjfydh
   giohapxnpaqayryd
   qheqdprmnqlpztls
   rdxhijmzegxkotoq
   hdnmaspumdwnrcdz
   wafpbgehbuzdgsnc
   tbtrfztsferdmhsy
   vusndcyjngtkrtmk
   ilqblestzxebcifh
   urfgjbjgzlrfsdlv
   aptcdvpsqwleqttn
   bigczjvzokvfofiw
   zjnjeufonyqgkbpx
   trcdebioegfqrrdi
   jrdvdriujlmbqewt
   jqrcmuxpwurdhaue
   yjlermsgruublkly
   zwarvgszuqeesuwq
   xthhhqzwvqiyctvs
   mzwwaxnbdxhajyyv
   nclsozlqrjvqifyi
   gcnyqmhezcqvksqw
   deuakiskeuwdfxwp
   tclkbhqqcydlgrrl
   qbpndlfjayowkcrx
   apjhkutpoiegnxfx
   oaupiimsplsvcsie
   sdmxrufyhztxzgmt
   ukfoinnlbqrgzdeh
   azosvwtcipqzckns
   mydyeqsimocdikzn
   itfmfjrclmglcrkc
   swknpgysfscdrnop
   shyyuvvldmqheuiv
   tljrjohwhhekyhle
   dayinwzuvzimvzjw
   qgylixuuervyylur
   klqqaiemurawmaaz
   hdmzgtxxjabplxvf
   xiivzelzdjjtkhnj
   ktgplkzblgxwrnvo
   gvbpyofzodnknytd
   lqhlmnmhakqeffqw
   ltzdbngrcxwuxecy
   obxnfjeebvovjcjz
   zexpwallpocrxpvp
   tjpkkmcqbbkxaiak
   qiedfixxgvciblih
   qcxkhghosuslbyih
   gnsfidwhzaxjufgm
   xrghwgvyjakkzidw
   tftftwedtecglavz
   wquqczzkzqrlfngr
   twibtkijpvzbsfro
   bmplypdsvzuhrjxp
   zanrfmestvqpwbuh
   zonrhfqowyimcukm
   kpvajjfmqpbhrjma
   kujzluicngigjbtp
   iusguantsrwxdjal
   kwxeuylcnszswahw
   visdhnkobxnemldu
   rogeadmmaicwtabl
   pxqycifbgevqudvs
   osaiozyvlyddylqr
   vffjxrolrpuxcatx
   jbmsetccdrywssjd
   qgxyhjfpbfifmvgc
   npejgalglldxjdhs
   mbbtqgmttastrlck
   whapaqwdtpkropek
   dulbdboxazfyjgkg
   xaymnudlozbykgow
   lebvqmxeaymkkfoy
   bmicnfuubkregouj
   dieatyxxxlvhneoj
   yglaapcsnsbuvrva
   bbpjaslqpzqcwkpk
   xehuznbayagrbhnd
   ikqmeovaurmqfuvr
   ylyokwuzxltvxmgv
   hqtfinrkllhqtoiz
   pjmhtigznoaejifx
   fqdbmowkjtmvvrmx
   uvqtqfoulvzozfxv
   rpajajukuxtchrjd
   sznucejifktvxdre
   ufvibsmoushmjbne
   xirdqoshngthfvax
   iafpkddchsgdqmzl
   vmualmlduipvykzh
   fnmuahmblwyceejb
   ilsaapnswfoymiov
   lenvylifraahaclv
   cukqxlipuyxedqfh
   zgwecslpniqvtvuz
   cdcdfpsxuyrhsmag
   dszjinhantnxgqra
   ioimwotsgnjeacgt
   dqcymnvjystbynhp
   yibaudyfefbfgunx
   cabslcvunjavqkbf
   goymzvmgkvlsmugf
   zxteiitpthzskjjx
   agnxcnaqhjhlurzs
   cvmgyxhhnykuxbmb
   cgqmjexydmvgwxpp
   sygjajofieojiuna
   clpvxbrbjvqfbzvu
   cbntswqynsdqnhyv
   bztpbtwbefiotkfa
   pnxccbgajvhyeybu
   asyzrvgzumtuissa
   facjyblvcqqginxa
   rvwnucnbsvberxuv
   ghrbeykzrxclasie
   ekujtselepgjtaql
   krtrzsmduhsifyiw
   ticjswvsnyrwhpnt
   clmjhsftkfjzwyke
   lbxlcixxcztddlam
   xhfeekmxgbloguri
   azxqwlucwhahtvep
   kitdjrwmockhksow
   keznwwcusgbtvfrs
   ljvzxoywcofgwajj
   vebjnhnkcfzbhrcw
   eqfcxkavstxcuels
   ldattkyawjrvcido
   bsqqeilshcwtqyil
   foqqsxahfiozcqrw
   liswfmuhzfbyzjhf
   sulbdcyzmolapfbs
   zuggzkelwxjpsgxb
   betioxrgtnhpivcw
   xmtbixstdipibhgs
   ttvurgqmulryyaji
   viobnljznzppfmxw
   qlzabfopydtxrlet
   tusvydegfxhaxolk
   thoufvvfjferxhwp
   cfyyzppfarjiilbs
   jwmhxtgafkkgseqs
   pqwuuaxbeklodwpt
   vndyveahdiwgkjyx
   ssrjgasfhdouwyoh
   thbavfcisgvvyekf
   yjdvxmubvqadgypa
   tlbmcxaelkouhsvu
   bonohfnlboxiezzr
   rktlxcbkhewyvcjl
   rsmoutcbcssodvsc
   qszdratuxcrhsvoh
   eypyfahpuzqwzwhi
   yhkrleqmqlmwdnio
   vpnvxusvmngsobmq
   hkzyhopvxrsimzys
   dblriiwnrvnhxykl
   xkriqxkrprjwpncs
   rcymltrbszhyhqti
   mzbvneplsnpiztzn
   vkqtnptgbqefvfoc
   nwdtfiaozkcjtlax
   crximadpvdaccrsm
   lrbajafxwwnxvbei
   rbexzesrytpwwmjf
   stxwjarildpnzfpg
   btamaihdivrhhrrv
   acqbucebpaulpotl
   dkjhzghxxtxgdpvm
   rsbzwsnvlpqzyjir
   mizypbwvpgqoiams
   nvrslorjpqaasudn
   wvexcpzmconqkbvk
   rfwfumhjwzrvdzam
   eaghdaqorkhdsmth
   gtuntmpqaivosewh
   nzlsmdgjrigghrmy
   dhuvxwobpzbuwjgk
   kkcuvbezftvkhebf
   aeediumxyljbuyqu
   rfkpqeekjezejtjc
   wkzasuyckmgwddwy
   eixpkpdhsjmynxhi
   elrlnndorggmmhmx
   ayxwhkxahljoxggy
   mtzvvwmwexkberaw
   evpktriyydxvdhpx
   otznecuqsfagruls
   vrdykpyebzyblnut
   cnriedolerlhbqjy
   uajaprnrrkvggqgx
   xdlxuguloojvskjq
   mfifrjamczjncuym
   otmgvsykuuxrluky
   oiuroieurpyejuvm
   #+end_example

** day5-common (test)
   #+name: test_set_day5
   #+begin_src python :results value :cache yes
   #
   data="""ugknbfddgicrmopn
aaa
jchzalrnumimnmhp
haegwjzuvuyypxyu
dvszwmarrgswjxmb
qjhvhtzxzqqjkmpb
xxyxx
uurcxstgmygtbstg
ieodomkazucvgmuy"""
   return data
   #+end_src

   #+RESULTS[24b7e0e0a4f5e07dccb5afe9b529af7d8912bbb9]: test_set_day5
   : ugknbfddgicrmopn
   : aaa
   : jchzalrnumimnmhp
   : haegwjzuvuyypxyu
   : dvszwmarrgswjxmb
   : qjhvhtzxzqqjkmpb
   : xxyxx
   : uurcxstgmygtbstg
   : ieodomkazucvgmuy

   #+name: day5-com
   #+begin_src python :results output :var data=test_set_day5
     # rules: 3 vowels, at least 2 repeated letters, does not contain ab, cd, pq, or xy
     class d5():
         vows = ['a', 'e','i', 'o', 'u']

         banned = {
             'b' : 'a',
             'd' : 'c',
             'q' : 'p',
             'y' : 'x'
         }
         def __init__(self, data):
             self.data = data.splitlines()

         def isVowel(self, letter):
             if letter in d5.vows:
                 return 1
             else:
                 return 0
         def banned_or_double(self, let1, let2):
             if let1 == let2:
                 return False, 1
             if let1 in d5.banned:
                 if d5.banned[let1] == let2:
                     return True, 0
             return False, 0
         def check_linea(self, line):
             last_let = ''
             vowels = 0
             banned = False
             doubles = 0
             for cur_let in line:
                 vowels += self.isVowel(cur_let)
                 b, d = self.banned_or_double(cur_let, last_let)
                 doubles += d
                 banned = banned or b
                 if banned == True:
                     return False
                 last_let = cur_let
             if doubles < 1:
                 return False
             if vowels < 3:
                 return False
             return True


         def check_all_linesa(self):
             count = 0
             for line in self.data:
                 if self.check_linea(line):
                     count += 1
             return count
         def two_pair(self, cur_line, ii, has_twop):
             if has_twop:
                 return True
             if ii+2 >= len(cur_line) or ii == 0:
                 return False
             rem = cur_line[ii+1:]
             pair = cur_line[ii-1:ii+1]
             if rem.find(pair) >= 0:
                 return True
             else:
                 return False
         def hop_pair(self, cur_let, past_let):
             if cur_let == past_let:
                 return 1
             else:
                 return 0
         def check_lineb(self, line):
             past_let = ''
             past2_let = ''
             hp = 0
             h2p = False
             for num, let in enumerate(line):
                 h2p = self.two_pair(line, num, h2p)
                 hp += self.hop_pair(let, past2_let)
                 past2_let = past_let
                 past_let = let
                 if h2p and hp > 0:
                     return 1
             return 0
         def check_all_linesb(self):
             count = 0
             for line in self.data:
                 count += self.check_lineb(line)
             return count




        

            

     r = d5(data)
     print(r.check_all_linesa())
     print(r.check_all_linesb())


   #+end_src

   #+RESULTS: day5-com
   : 2
   : 2

** day5a
   #+name: day5a
   #+begin_src python :results output :var data=init_day5 :noweb yes
   <<day5-com>>
   r = d5(data)
   print(r.check_all_linesa())
   
   #+end_src

   #+RESULTS: day5a
   : 258
   : 53
   : 258

** day5b
   #+name: day5b
   #+begin_src python :results output :var data=init_day5 :noweb yes
   <<day5-com>>
   #+end_src
* day6
** init_day6
   #+name: init_day6
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/6/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[9e1904a892a094d8dce2196a888f728102aea272]: init_day6
   #+begin_example
   toggle 461,550 through 564,900
   turn off 370,39 through 425,839
   turn off 464,858 through 833,915
   turn off 812,389 through 865,874
   turn on 599,989 through 806,993
   turn on 376,415 through 768,548
   turn on 606,361 through 892,600
   turn off 448,208 through 645,684
   toggle 50,472 through 452,788
   toggle 205,417 through 703,826
   toggle 533,331 through 906,873
   toggle 857,493 through 989,970
   turn off 631,950 through 894,975
   turn off 387,19 through 720,700
   turn off 511,843 through 581,945
   toggle 514,557 through 662,883
   turn off 269,809 through 876,847
   turn off 149,517 through 716,777
   turn off 994,939 through 998,988
   toggle 467,662 through 555,957
   turn on 952,417 through 954,845
   turn on 565,226 through 944,880
   turn on 214,319 through 805,722
   toggle 532,276 through 636,847
   toggle 619,80 through 689,507
   turn on 390,706 through 884,722
   toggle 17,634 through 537,766
   toggle 706,440 through 834,441
   toggle 318,207 through 499,530
   toggle 698,185 through 830,343
   toggle 566,679 through 744,716
   toggle 347,482 through 959,482
   toggle 39,799 through 981,872
   turn on 583,543 through 846,710
   turn off 367,664 through 595,872
   turn on 805,439 through 964,995
   toggle 209,584 through 513,802
   turn off 106,497 through 266,770
   turn on 975,2 through 984,623
   turn off 316,684 through 369,876
   turn off 30,309 through 259,554
   turn off 399,680 through 861,942
   toggle 227,740 through 850,829
   turn on 386,603 through 552,879
   turn off 703,795 through 791,963
   turn off 573,803 through 996,878
   turn off 993,939 through 997,951
   turn on 809,221 through 869,723
   turn off 38,720 through 682,751
   turn off 318,732 through 720,976
   toggle 88,459 through 392,654
   turn off 865,654 through 911,956
   toggle 264,284 through 857,956
   turn off 281,776 through 610,797
   toggle 492,660 through 647,910
   turn off 879,703 through 925,981
   turn off 772,414 through 974,518
   turn on 694,41 through 755,96
   turn on 452,406 through 885,881
   turn off 107,905 through 497,910
   turn off 647,222 through 910,532
   turn on 679,40 through 845,358
   turn off 144,205 through 556,362
   turn on 871,804 through 962,878
   turn on 545,676 through 545,929
   turn off 316,716 through 413,941
   toggle 488,826 through 755,971
   toggle 957,832 through 976,992
   toggle 857,770 through 905,964
   toggle 319,198 through 787,673
   turn on 832,813 through 863,844
   turn on 818,296 through 818,681
   turn on 71,699 through 91,960
   turn off 838,578 through 967,928
   toggle 440,856 through 507,942
   toggle 121,970 through 151,974
   toggle 391,192 through 659,751
   turn on 78,210 through 681,419
   turn on 324,591 through 593,939
   toggle 159,366 through 249,760
   turn off 617,167 through 954,601
   toggle 484,607 through 733,657
   turn on 587,96 through 888,819
   turn off 680,984 through 941,991
   turn on 800,512 through 968,691
   turn off 123,588 through 853,603
   turn on 1,862 through 507,912
   turn on 699,839 through 973,878
   turn off 848,89 through 887,893
   toggle 344,353 through 462,403
   turn on 780,731 through 841,760
   toggle 693,973 through 847,984
   toggle 989,936 through 996,958
   toggle 168,475 through 206,963
   turn on 742,683 through 769,845
   toggle 768,116 through 987,396
   turn on 190,364 through 617,526
   turn off 470,266 through 530,839
   toggle 122,497 through 969,645
   turn off 492,432 through 827,790
   turn on 505,636 through 957,820
   turn on 295,476 through 698,958
   toggle 63,298 through 202,396
   turn on 157,315 through 412,939
   turn off 69,789 through 134,837
   turn off 678,335 through 896,541
   toggle 140,516 through 842,668
   turn off 697,585 through 712,668
   toggle 507,832 through 578,949
   turn on 678,279 through 886,621
   toggle 449,744 through 826,910
   turn off 835,354 through 921,741
   toggle 924,878 through 985,952
   turn on 666,503 through 922,905
   turn on 947,453 through 961,587
   toggle 525,190 through 795,654
   turn off 62,320 through 896,362
   turn on 21,458 through 972,536
   turn on 446,429 through 821,970
   toggle 376,423 through 805,455
   toggle 494,896 through 715,937
   turn on 583,270 through 667,482
   turn off 183,468 through 280,548
   toggle 623,289 through 750,524
   turn on 836,706 through 967,768
   turn on 419,569 through 912,908
   turn on 428,260 through 660,433
   turn off 683,627 through 916,816
   turn on 447,973 through 866,980
   turn on 688,607 through 938,990
   turn on 245,187 through 597,405
   turn off 558,843 through 841,942
   turn off 325,666 through 713,834
   toggle 672,606 through 814,935
   turn off 161,812 through 490,954
   turn on 950,362 through 985,898
   turn on 143,22 through 205,821
   turn on 89,762 through 607,790
   toggle 234,245 through 827,303
   turn on 65,599 through 764,997
   turn on 232,466 through 965,695
   turn on 739,122 through 975,590
   turn off 206,112 through 940,558
   toggle 690,365 through 988,552
   turn on 907,438 through 977,691
   turn off 838,809 through 944,869
   turn on 222,12 through 541,832
   toggle 337,66 through 669,812
   turn on 732,821 through 897,912
   toggle 182,862 through 638,996
   turn on 955,808 through 983,847
   toggle 346,227 through 841,696
   turn on 983,270 through 989,756
   turn off 874,849 through 876,905
   turn off 7,760 through 678,795
   toggle 973,977 through 995,983
   turn off 911,961 through 914,976
   turn on 913,557 through 952,722
   turn off 607,933 through 939,999
   turn on 226,604 through 517,622
   turn off 3,564 through 344,842
   toggle 340,578 through 428,610
   turn on 248,916 through 687,925
   toggle 650,185 through 955,965
   toggle 831,359 through 933,536
   turn off 544,614 through 896,953
   toggle 648,939 through 975,997
   turn on 464,269 through 710,521
   turn off 643,149 through 791,320
   turn off 875,549 through 972,643
   turn off 953,969 through 971,972
   turn off 236,474 through 772,591
   toggle 313,212 through 489,723
   toggle 896,829 through 897,837
   toggle 544,449 through 995,905
   turn off 278,645 through 977,876
   turn off 887,947 through 946,977
   turn on 342,861 through 725,935
   turn on 636,316 through 692,513
   toggle 857,470 through 950,528
   turn off 736,196 through 826,889
   turn on 17,878 through 850,987
   turn on 142,968 through 169,987
   turn on 46,470 through 912,853
   turn on 182,252 through 279,941
   toggle 261,143 through 969,657
   turn off 69,600 through 518,710
   turn on 372,379 through 779,386
   toggle 867,391 through 911,601
   turn off 174,287 through 900,536
   toggle 951,842 through 993,963
   turn off 626,733 through 985,827
   toggle 622,70 through 666,291
   turn off 980,671 through 985,835
   turn off 477,63 through 910,72
   turn off 779,39 through 940,142
   turn on 986,570 through 997,638
   toggle 842,805 through 943,985
   turn off 890,886 through 976,927
   turn off 893,172 through 897,619
   turn off 198,780 through 835,826
   toggle 202,209 through 219,291
   turn off 193,52 through 833,283
   toggle 414,427 through 987,972
   turn on 375,231 through 668,236
   turn off 646,598 through 869,663
   toggle 271,462 through 414,650
   turn off 679,121 through 845,467
   toggle 76,847 through 504,904
   turn off 15,617 through 509,810
   toggle 248,105 through 312,451
   turn off 126,546 through 922,879
   turn on 531,831 through 903,872
   toggle 602,431 through 892,792
   turn off 795,223 through 892,623
   toggle 167,721 through 533,929
   toggle 813,251 through 998,484
   toggle 64,640 through 752,942
   turn on 155,955 through 892,985
   turn on 251,329 through 996,497
   turn off 341,716 through 462,994
   toggle 760,127 through 829,189
   turn on 86,413 through 408,518
   toggle 340,102 through 918,558
   turn off 441,642 through 751,889
   turn on 785,292 through 845,325
   turn off 123,389 through 725,828
   turn on 905,73 through 983,270
   turn off 807,86 through 879,276
   toggle 500,866 through 864,916
   turn on 809,366 through 828,534
   toggle 219,356 through 720,617
   turn off 320,964 through 769,990
   turn off 903,167 through 936,631
   toggle 300,137 through 333,693
   toggle 5,675 through 755,848
   turn off 852,235 through 946,783
   toggle 355,556 through 941,664
   turn on 810,830 through 867,891
   turn off 509,869 through 667,903
   toggle 769,400 through 873,892
   turn on 553,614 through 810,729
   turn on 179,873 through 589,962
   turn off 466,866 through 768,926
   toggle 143,943 through 465,984
   toggle 182,380 through 569,552
   turn off 735,808 through 917,910
   turn on 731,802 through 910,847
   turn off 522,74 through 731,485
   turn on 444,127 through 566,996
   turn off 232,962 through 893,979
   turn off 231,492 through 790,976
   turn on 874,567 through 943,684
   toggle 911,840 through 990,932
   toggle 547,895 through 667,935
   turn off 93,294 through 648,636
   turn off 190,902 through 532,970
   turn off 451,530 through 704,613
   toggle 936,774 through 937,775
   turn off 116,843 through 533,934
   turn on 950,906 through 986,993
   turn on 910,51 through 945,989
   turn on 986,498 through 994,945
   turn off 125,324 through 433,704
   turn off 60,313 through 75,728
   turn on 899,494 through 940,947
   toggle 832,316 through 971,817
   toggle 994,983 through 998,984
   toggle 23,353 through 917,845
   toggle 174,799 through 658,859
   turn off 490,878 through 534,887
   turn off 623,963 through 917,975
   toggle 721,333 through 816,975
   toggle 589,687 through 890,921
   turn on 936,388 through 948,560
   turn off 485,17 through 655,610
   turn on 435,158 through 689,495
   turn on 192,934 through 734,936
   turn off 299,723 through 622,847
   toggle 484,160 through 812,942
   turn off 245,754 through 818,851
   turn on 298,419 through 824,634
   toggle 868,687 through 969,760
   toggle 131,250 through 685,426
   turn off 201,954 through 997,983
   turn on 353,910 through 832,961
   turn off 518,781 through 645,875
   turn off 866,97 through 924,784
   toggle 836,599 through 857,767
   turn on 80,957 through 776,968
   toggle 277,130 through 513,244
   turn off 62,266 through 854,434
   turn on 792,764 through 872,842
   turn off 160,949 through 273,989
   turn off 664,203 through 694,754
   toggle 491,615 through 998,836
   turn off 210,146 through 221,482
   turn off 209,780 through 572,894
   turn on 766,112 through 792,868
   turn on 222,12 through 856,241
   #+end_example

** day6-common (test)
   #+name: test_set_day6
   #+begin_src python :results value :cache yes
   #
   data="""turn on 0,0 through 999,999
toggle 0,0 through 999,0
turn off 499,499 through 500,500""" 
   return data
   #+end_src

   #+RESULTS[cb6334550a69e0467d9efdce82440e3fed5149f0]: test_set_day6
   : turn on 0,0 through 999,999
   : toggle 0,0 through 999,0
   : turn off 499,499 through 500,500

   #+name: day6-com
   #+begin_src python :results output :var data=test_set_day6
     import numpy as np
     class light_grid():
         def __init__(self, ins):
             act_lookup = {
                 'on' : on,
                 'off': off,
                 'le' : tog
             }
             ins_s = ins.splitlines()
             self.grid = np.zeros((1000, 1000))
             for line in ins_s:
                 f_line = line.replace('gg', ' ')
                 _, act, start, _, end = f_line.split()
                 startx, starty = start.split(',')
                 endx, endy = end.split(',')
                 sx = int(startx)
                 sy = int(starty)
                 ex = int(endx)
                 ey = int(endy)
                 act_lookup[act](self.grid[sx:ex+1, sy:ey+1])
                 
             print(np.sum(self.grid))

     def off(m):
         m2 = (m > 0).astype(int)
         m[:] -= m2
     def on(m):
         m[:] += 1
     def tog(m):
         m[:] += 2


     lg = light_grid(data)
   #+end_src

   #+RESULTS: day6-com
   : 1001996.0

** day6a
   #+name: day6a
   #+begin_src python :results output :var data=init_day6 :noweb yes
   <<day6-com>>
   #+end_src

   #+RESULTS: day6a
   : 543903

** day6b
   #+name: day6b
   #+begin_src python :results output :var data=init_day6 :noweb yes
   <<day6-com>>
   #+end_src

   #+RESULTS: day6b
   : 14687245.0

* day7
** init_day7
   #+name: init_day7
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/7/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[ff4d62ed942d7fedd743ff9b5509dcebb9c245bf]: init_day7
   #+begin_example
   lf AND lq -> ls
   iu RSHIFT 1 -> jn
   bo OR bu -> bv
   gj RSHIFT 1 -> hc
   et RSHIFT 2 -> eu
   bv AND bx -> by
   is OR it -> iu
   b OR n -> o
   gf OR ge -> gg
   NOT kt -> ku
   ea AND eb -> ed
   kl OR kr -> ks
   hi AND hk -> hl
   au AND av -> ax
   lf RSHIFT 2 -> lg
   dd RSHIFT 3 -> df
   eu AND fa -> fc
   df AND dg -> di
   ip LSHIFT 15 -> it
   NOT el -> em
   et OR fe -> ff
   fj LSHIFT 15 -> fn
   t OR s -> u
   ly OR lz -> ma
   ko AND kq -> kr
   NOT fx -> fy
   et RSHIFT 1 -> fm
   eu OR fa -> fb
   dd RSHIFT 2 -> de
   NOT go -> gp
   kb AND kd -> ke
   hg OR hh -> hi
   jm LSHIFT 1 -> kg
   NOT cn -> co
   jp RSHIFT 2 -> jq
   jp RSHIFT 5 -> js
   1 AND io -> ip
   eo LSHIFT 15 -> es
   1 AND jj -> jk
   g AND i -> j
   ci RSHIFT 3 -> ck
   gn AND gp -> gq
   fs AND fu -> fv
   lj AND ll -> lm
   jk LSHIFT 15 -> jo
   iu RSHIFT 3 -> iw
   NOT ii -> ij
   1 AND cc -> cd
   bn RSHIFT 3 -> bp
   NOT gw -> gx
   NOT ft -> fu
   jn OR jo -> jp
   iv OR jb -> jc
   hv OR hu -> hw
   19138 -> b
   gj RSHIFT 5 -> gm
   hq AND hs -> ht
   dy RSHIFT 1 -> er
   ao OR an -> ap
   ld OR le -> lf
   bk LSHIFT 1 -> ce
   bz AND cb -> cc
   bi LSHIFT 15 -> bm
   il AND in -> io
   af AND ah -> ai
   as RSHIFT 1 -> bl
   lf RSHIFT 3 -> lh
   er OR es -> et
   NOT ax -> ay
   ci RSHIFT 1 -> db
   et AND fe -> fg
   lg OR lm -> ln
   k AND m -> n
   hz RSHIFT 2 -> ia
   kh LSHIFT 1 -> lb
   NOT ey -> ez
   NOT di -> dj
   dz OR ef -> eg
   lx -> a
   NOT iz -> ja
   gz LSHIFT 15 -> hd
   ce OR cd -> cf
   fq AND fr -> ft
   at AND az -> bb
   ha OR gz -> hb
   fp AND fv -> fx
   NOT gb -> gc
   ia AND ig -> ii
   gl OR gm -> gn
   0 -> c
   NOT ca -> cb
   bn RSHIFT 1 -> cg
   c LSHIFT 1 -> t
   iw OR ix -> iy
   kg OR kf -> kh
   dy OR ej -> ek
   km AND kn -> kp
   NOT fc -> fd
   hz RSHIFT 3 -> ib
   NOT dq -> dr
   NOT fg -> fh
   dy RSHIFT 2 -> dz
   kk RSHIFT 2 -> kl
   1 AND fi -> fj
   NOT hr -> hs
   jp RSHIFT 1 -> ki
   bl OR bm -> bn
   1 AND gy -> gz
   gr AND gt -> gu
   db OR dc -> dd
   de OR dk -> dl
   as RSHIFT 5 -> av
   lf RSHIFT 5 -> li
   hm AND ho -> hp
   cg OR ch -> ci
   gj AND gu -> gw
   ge LSHIFT 15 -> gi
   e OR f -> g
   fp OR fv -> fw
   fb AND fd -> fe
   cd LSHIFT 15 -> ch
   b RSHIFT 1 -> v
   at OR az -> ba
   bn RSHIFT 2 -> bo
   lh AND li -> lk
   dl AND dn -> do
   eg AND ei -> ej
   ex AND ez -> fa
   NOT kp -> kq
   NOT lk -> ll
   x AND ai -> ak
   jp OR ka -> kb
   NOT jd -> je
   iy AND ja -> jb
   jp RSHIFT 3 -> jr
   fo OR fz -> ga
   df OR dg -> dh
   gj RSHIFT 2 -> gk
   gj OR gu -> gv
   NOT jh -> ji
   ap LSHIFT 1 -> bj
   NOT ls -> lt
   ir LSHIFT 1 -> jl
   bn AND by -> ca
   lv LSHIFT 15 -> lz
   ba AND bc -> bd
   cy LSHIFT 15 -> dc
   ln AND lp -> lq
   x RSHIFT 1 -> aq
   gk OR gq -> gr
   NOT kx -> ky
   jg AND ji -> jj
   bn OR by -> bz
   fl LSHIFT 1 -> gf
   bp OR bq -> br
   he OR hp -> hq
   et RSHIFT 5 -> ew
   iu RSHIFT 2 -> iv
   gl AND gm -> go
   x OR ai -> aj
   hc OR hd -> he
   lg AND lm -> lo
   lh OR li -> lj
   da LSHIFT 1 -> du
   fo RSHIFT 2 -> fp
   gk AND gq -> gs
   bj OR bi -> bk
   lf OR lq -> lr
   cj AND cp -> cr
   hu LSHIFT 15 -> hy
   1 AND bh -> bi
   fo RSHIFT 3 -> fq
   NOT lo -> lp
   hw LSHIFT 1 -> iq
   dd RSHIFT 1 -> dw
   dt LSHIFT 15 -> dx
   dy AND ej -> el
   an LSHIFT 15 -> ar
   aq OR ar -> as
   1 AND r -> s
   fw AND fy -> fz
   NOT im -> in
   et RSHIFT 3 -> ev
   1 AND ds -> dt
   ec AND ee -> ef
   NOT ak -> al
   jl OR jk -> jm
   1 AND en -> eo
   lb OR la -> lc
   iu AND jf -> jh
   iu RSHIFT 5 -> ix
   bo AND bu -> bw
   cz OR cy -> da
   iv AND jb -> jd
   iw AND ix -> iz
   lf RSHIFT 1 -> ly
   iu OR jf -> jg
   NOT dm -> dn
   lw OR lv -> lx
   gg LSHIFT 1 -> ha
   lr AND lt -> lu
   fm OR fn -> fo
   he RSHIFT 3 -> hg
   aj AND al -> am
   1 AND kz -> la
   dy RSHIFT 5 -> eb
   jc AND je -> jf
   cm AND co -> cp
   gv AND gx -> gy
   ev OR ew -> ex
   jp AND ka -> kc
   fk OR fj -> fl
   dy RSHIFT 3 -> ea
   NOT bs -> bt
   NOT ag -> ah
   dz AND ef -> eh
   cf LSHIFT 1 -> cz
   NOT cv -> cw
   1 AND cx -> cy
   de AND dk -> dm
   ck AND cl -> cn
   x RSHIFT 5 -> aa
   dv LSHIFT 1 -> ep
   he RSHIFT 2 -> hf
   NOT bw -> bx
   ck OR cl -> cm
   bp AND bq -> bs
   as OR bd -> be
   he AND hp -> hr
   ev AND ew -> ey
   1 AND lu -> lv
   kk RSHIFT 3 -> km
   b AND n -> p
   NOT kc -> kd
   lc LSHIFT 1 -> lw
   km OR kn -> ko
   id AND if -> ig
   ih AND ij -> ik
   jr AND js -> ju
   ci RSHIFT 5 -> cl
   hz RSHIFT 1 -> is
   1 AND ke -> kf
   NOT gs -> gt
   aw AND ay -> az
   x RSHIFT 2 -> y
   ab AND ad -> ae
   ff AND fh -> fi
   ci AND ct -> cv
   eq LSHIFT 1 -> fk
   gj RSHIFT 3 -> gl
   u LSHIFT 1 -> ao
   NOT bb -> bc
   NOT hj -> hk
   kw AND ky -> kz
   as AND bd -> bf
   dw OR dx -> dy
   br AND bt -> bu
   kk AND kv -> kx
   ep OR eo -> eq
   he RSHIFT 1 -> hx
   ki OR kj -> kk
   NOT ju -> jv
   ek AND em -> en
   kk RSHIFT 5 -> kn
   NOT eh -> ei
   hx OR hy -> hz
   ea OR eb -> ec
   s LSHIFT 15 -> w
   fo RSHIFT 1 -> gh
   kk OR kv -> kw
   bn RSHIFT 5 -> bq
   NOT ed -> ee
   1 AND ht -> hu
   cu AND cw -> cx
   b RSHIFT 5 -> f
   kl AND kr -> kt
   iq OR ip -> ir
   ci RSHIFT 2 -> cj
   cj OR cp -> cq
   o AND q -> r
   dd RSHIFT 5 -> dg
   b RSHIFT 2 -> d
   ks AND ku -> kv
   b RSHIFT 3 -> e
   d OR j -> k
   NOT p -> q
   NOT cr -> cs
   du OR dt -> dv
   kf LSHIFT 15 -> kj
   NOT ac -> ad
   fo RSHIFT 5 -> fr
   hz OR ik -> il
   jx AND jz -> ka
   gh OR gi -> gj
   kk RSHIFT 1 -> ld
   hz RSHIFT 5 -> ic
   as RSHIFT 2 -> at
   NOT jy -> jz
   1 AND am -> an
   ci OR ct -> cu
   hg AND hh -> hj
   jq OR jw -> jx
   v OR w -> x
   la LSHIFT 15 -> le
   dh AND dj -> dk
   dp AND dr -> ds
   jq AND jw -> jy
   au OR av -> aw
   NOT bf -> bg
   z OR aa -> ab
   ga AND gc -> gd
   hz AND ik -> im
   jt AND jv -> jw
   z AND aa -> ac
   jr OR js -> jt
   hb LSHIFT 1 -> hv
   hf OR hl -> hm
   ib OR ic -> id
   fq OR fr -> fs
   cq AND cs -> ct
   ia OR ig -> ih
   dd OR do -> dp
   d AND j -> l
   ib AND ic -> ie
   as RSHIFT 3 -> au
   be AND bg -> bh
   dd AND do -> dq
   NOT l -> m
   1 AND gd -> ge
   y AND ae -> ag
   fo AND fz -> gb
   NOT ie -> if
   e AND f -> h
   x RSHIFT 3 -> z
   y OR ae -> af
   hf AND hl -> hn
   NOT h -> i
   NOT hn -> ho
   he RSHIFT 5 -> hh
   #+end_example

** day7-common (test)
   #+name: test_set_day7
   #+begin_src python :results value :cache yes
   #
   data="""123 -> x
456 -> y
x AND y -> d
x OR y -> e
x LSHIFT 2 -> f
y RSHIFT 2 -> g
NOT x -> h
NOT y -> i"""
   return data
   #+end_src

   #+RESULTS[d094c987eb41c7e97bb812c94603aa56046d168c]: test_set_day7
   : 123 -> x
   : 456 -> y
   : x AND y -> d
   : x OR y -> e
   : x LSHIFT 2 -> f
   : y RSHIFT 2 -> g
   : NOT x -> h
   : NOT y -> i

   #+name: day7-com
   #+begin_src python :results output :var data=test_set_day7
          import numpy as np
          def cir_and(v, t, e, w):
              return w[e[0]] & w[e[1]]
          def cir_or(v, t, e, w):
              return w[e[0]] | w[e[1]]
          def cir_not(v, t, e, w):
              return ~w[e[0]]
          def cir_ls(v, t, e, w):
              return w[e[0]] << v
          def cir_rs(v, t, e, w):
              return w[e[0]] >> v
          def cir_eq(v, t, e, w):
              return v

          f_dict = {
              'AND' : cir_and,
              'OR' : cir_or,
              'NOT' : cir_not,
              'LSHIFT' : cir_ls,
              'RSHIFT' : cir_rs

          }
          class con():
              def __init__(self, val, tar, els, f):
                  self.val = val
                  self.tar = tar
                  self.els = els
                  self.f = f

          wires = {}
          for line in data.splitlines():
              val = 0
              f = cir_eq
              t = False
              els = []
              q = []
              s = True
              for atom in line.split():
                  if t:
                      tar = atom
                  elif atom.isnumeric():
                      val = np.uint16(atom)
                  elif atom in f_dict:
                      f = f_dict[atom]
                  elif atom == '->':
                      t = True
                  else:
                      els.append(atom)
                      """
              for e in els:
                  if e not in wires:
                      q.append(con(val, tar, els, f))
                      s = False
                      break
              if s:"""
              try:
                  wires[tar] = f(val, tar, els, wires)
              except KeyError as err:
                  q.append(con(val, tar, els, f))

          '''while len(q) > 0:
              print(len(q))
              nq = []
              for c in q:
                  try:
                      wires[c.tar] = c.f(c.val, c.tar, c.els, wires)
                  except KeyError as err:
                      nq.append(c)
              q = nq
          '''

          #     print(wires)
     

   #+end_src

   #+RESULTS: day7-com

** day7a
   #+name: day7a
   #+begin_src python :results output :var data=init_day7 :noweb yes
   <<day7-com>>
   print(wires['a'])
   #+end_src

   #+RESULTS: day7a
   : 0

** day7b
   #+name: day7b
   #+begin_src python :results output :var data=init_day7 :noweb yes
   <<day7-com>>
   #+end_src
* day10
  :PROPERTIES:
  :header-args: :tangle ./day10.py
  :END:
** init_day10
   #+name: init_day10
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/10/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[e61004375d12c2b01821e668b54cc4bce9520297]: init_day10
   : 1113222113

** day10-common (test)
   #+name: test_set_day10
   #+begin_src python :results value :cache yes
   #
   data='1'
   return data
   #+end_src

   #+RESULTS[31bb15486b730e20c17906fa91a6e007933b331f]: test_set_day10
   : 1

   #+name: day10-com
   #+begin_src python :results output :var data=test_set_day10

     class look_say():
         def __init__(self, starting_string):
             self.cur_string = str(starting_string)

         def one_time_err(self):
             ii = 0
             next_string = []
             str_len = len(self.cur_string)
             while ii < str_len:
                 ii, cur_letter, num = self.look_err(ii, self.cur_string[ii], 0, str_len)
                 next_string.extend((str(num), cur_letter))
             self.cur_string = ''.join(next_string)

         def look_err(self, ii, cur_letter, num, str_len):
             try: 
                 if self.cur_string[ii] == cur_letter:
                     return self.look_err(ii+1, cur_letter, num+1, str_len)
             except IndexError as err:
                 return ii, cur_letter, num
             return ii, cur_letter, num

         def one_time_if(self):
             ii = 0
             next_string = []
             str_len = len(self.cur_string)
             while ii < str_len:
                 ii, cur_letter, num = self.look_if(ii, self.cur_string[ii], 0, str_len)
                 next_string.extend((str(num), cur_letter))
             self.cur_string = ''.join(next_string)

         def look_if(self, ii: int, cur_letter: str, num: int, str_len: int) -> tuple:
             if ii >= str_len:
                 return ii, cur_letter, num
             if self.cur_string[ii] == cur_letter:
                 return self.look_if(ii+1, cur_letter, num+1, str_len)
             return ii, cur_letter, num

         def look_iter(self, times=1):
             for _ in range(times):
                 old_number = self.cur_string[0]
                 count = 0
                 counts = []
                 numbers = []
                 for letter in self.cur_string:
                     if letter == old_number:
                         count += 1
                     else:
                         counts.append(count)
                         numbers.append(old_number)
                         old_number = letter
                         count = 1
                 counts.append(count)
                 numbers.append(old_number)
                 self.cur_string = ''.join(map(lambda x,y: ''.join((str(x), y)), counts, numbers))

         """def look_cy(self, times=1):
             for _ in range(times):
                 old_number = self.cur_string[0]
                 count = 0
                 counts = []
                 numbers = []
                 for letter in self.cur_string:
                     if letter == old_number:
                         count += 1
                     else:
                         counts.append(count)
                         numbers.append(old_number)
                         old_number = letter
                         count = 1
                 counts.append(count)
                 numbers.append(old_number)
                 self.cur_string = ''.join(map(lambda x,y: ''.join((str(x), y)), counts, numbers))
     """

     ls = look_say(data)

   #+end_src

   #+RESULTS: day10-com

** day10a
   #+name: day10a
   #+begin_src python :results output :var data=init_day10 :noweb yes
   import time
   t0 = time.time()
   <<day10-com>>
   for ii in range(50):
       ls.one_time_err()
   t1 = time.time()
   
   print('using error:', t1-t0)
   print(len(ls.cur_string))
   
   t0 = time.time()
   <<day10-com>>
   for ii in range(50):
       ls.one_time_if()
   t1 = time.time()
   print('using if:', t1-t0)
   print(len(ls.cur_string))
   
   t0 = time.time()
   <<day10-com>>
   for ii in range(50):
       ls.look_iter()
   t1 = time.time()
   print('using iter:', t1-t0)
   print(len(ls.cur_string))
   
   t0 = time.time()
   <<day10-com>>
   ls.look_iter(50)
   t1 = time.time()
   print('using iter:', t1-t0)
   print(len(ls.cur_string))
   #+end_src

   #+RESULTS: day10a
   : using error: 6.363506078720093
   : 3579328
   : using if: 7.727945327758789
   : 3579328
   : using iter: 4.502311944961548
   : 3579328
   : using iter: 3.747507095336914
   : 3579328

** day10b
   #+name: day10b
   #+begin_src python :results output :var data=init_day10 :noweb yes
   <<day10-com>>
   #+end_src
* day12
** init_day12
   #+name: init_day12
   #+begin_src python :results value :cache yes
   from lib.autoloader import Autoloader
   puz_data_url = "https://adventofcode.com/2015/day/12/input"
   al = Autoloader(puz_data_url)
   al.connect()
   data = al.fetch()
   return data
   #+end_src

   #+RESULTS[bdc9124697f14bc6938dbc811ac760f047266576]: init_day12
   | e | : | (a : (e :-39 c :119 a : (c :65 a : orange b : green d : orange) g : violet b : (e :6 c : (c : violet a :8 b : (red (a :37) green 84 yellow green (24 45 blue blue 56 yellow) orange)) a : violet b : (a :85) d : (109 66 (yellow violet 21 -30) violet blue -43 (e : violet c : red a : blue b :-22 d : (71 red 30 violet red 26 120) f : (red)) red)) d : (e : violet a : blue d : blue c : blue h : orange b : (e : red a : (c :115 a :137 b : green) d :-25 c : blue h : (a :161 b : (yellow 56 129 -31 yellow red green 105 orange 130)) b :142 g :194 f :122 i :-16) g :173 f : (orange green 54 -9) i :-23) f : (c :110 a : yellow b : ((a :155) 156 violet 94 yellow) d : (e :91 a :-18 d : red c : (green orange orange 190 yellow 158 blue orange blue 4) h :143 b : orange g :145 f : (orange 37 yellow -22 (c :30 a :78 b :196 d :84) -7 (yellow))))) b : (((c :0 a :108 b : green d : (e :59 c :119 a :104 b :167 d : blue)) (189 blue 121 ((green orange orange -17 192 red) (a : violet) green (c :42 a : blue b : red) (e :78 a : blue d : violet c :-9 h : violet b :115 g : orange f : violet i : red)) 57 violet) green) ((blue (1 53 orange) (e : (green -12 blue orange green 136 173) a : violet d :-43 c : (e :144 c :133 a : yellow g :154 b : orange d :127 f :194) h : (e :52 a :-43 d : orange c :-45 h : orange b :150 g :-12 f :91 i :6) b : (e : yellow c : blue a : violet g :112 b :174 d : violet f :90) g :177 f : blue) red violet 96) green violet ((a : (red red 46 red) b : (green 193 54 orange)) (orange 8 1 (violet 84 violet) 155 yellow 151 blue 196) yellow red (a : (green orange green 61 blue 39 -2 46 red 54)) violet 128)))) | a | : | (e : ((e : (yellow) c :93 a : violet b : (a : (a : yellow b : blue) b :-4) d : violet) 171 103 (13 orange ((51 violet yellow (c :85 a :103 b : green) 97 (e : orange a :-11 d :62 j : yellow c : orange h :47 b :83 g :119 f :180 i :136) (a :177) 80) (e : (c : yellow a : orange b :3 d :197) a :130 d : red j : red c :-44 h :-15 b :64 g :125 f :82 i : green)) (e : (orange 42 (orange 197 violet yellow blue 11 yellow) 189 yellow blue green violet) a : (a :149 b :69) d :128 c : ((green 150 45 86 red -8 41 orange blue)) h : ((-4 127 yellow violet 124 112 196 violet 161 40) 37 0 orange -30 -43 (-24 orange 142 violet red) blue 66) b : (c : violet a : (yellow 91 182 20 orange 159 46 55 141) b : (c :173 a :-40 b : green d : violet) d : (67 80 27 -15)) g : red f : (c : orange a :99 b : green)) (e : (c :40 a : orange b : green) c : green a :-44 b : (e : blue c :56 a : yellow g :62 b :188 d :141 f :-21) d : yellow f : (e : yellow c :67 a :33 g : yellow b : yellow d :51 f :195))) (orange violet (red) (green 35 (170 -30 orange 140 green violet violet (orange yellow yellow 35 blue violet -36 182 yellow 141) 146)) (a :61 b : orange) (31 blue green 65 red green) violet) (c : blue a : (blue) b :17) 95) c : ((48 blue (49) orange (e : violet c : green a : red b : red d :-29 f : (orange 20 190 97 (orange blue -30 blue green) blue yellow -47 (123 yellow green) -41)) green (a :170 b :32) ((c : green a : violet b : red) (yellow 36 yellow violet 149 (e : red c :141 a :-24 b : yellow d :-13 f : red) 69 orange 19 (87 red 167 red 77 110)) orange violet) (a :-16)) ((red) violet) (a : ((red 83 (e : red c : blue a : blue b : orange d : orange) 49 green violet) (e : yellow a : violet d :17 j : green c : (e : orange c : green a : green b :99 d : yellow f : orange) h :9 b :159 g : yellow f :167 i :147) (blue green violet) yellow (violet 197 blue (170 81 yellow orange 196) -24 99 193) -8 (red 81 -11 green red blue yellow blue (blue violet 131 184 160 -1)) green)) orange) a : ((e : blue a : violet d : ((a : blue b :46) violet 72 35 61 161) j : (green 78 144 (168 (red 77 38 green red) green yellow -8 yellow) 190 40 yellow 17 171) c : (e : red c : violet a : violet b :-14 d : red f :167) h : (((83 green 69 red) green 155 133) 106 1 orange) b :-41 g : (a :27) f : red i : (e : green c : green a :182 g : orange b : orange d : (orange) f : orange)) yellow green -26) b : (e : (-32 -11 (e : red c : yellow a : (e : green a : red d :105 c :-20 h :85 b : (e :47 a :89 d : green c : violet h : orange b : green g :140 f : green) g :111 f : orange i : yellow) b :143 d : (e : (e : orange c :129 a : blue b :142 d : violet) c : blue a :122 b : (violet orange 84 orange) d : red f : blue)) 58 (147)) a : (e : orange c : ((e :141 c :114 a :137 g : orange b :61 d :105 f :33)) a : (red red (e : green c :4 a : violet b : red d : blue) yellow (green 15 green -40 149 orange (e :-7 c :74 a : red b : green d :32)) blue yellow 146 (191 blue (orange blue 187 blue orange 127 yellow 38) 120 161 55 -30 green -10 violet) orange) b : (a :-32 b : blue) d : (e : (green 27) c : (94 violet red 18 166 yellow) a : (e : green a :95 d : green j :176 c :84 h : violet b : yellow g :-25 f :51 i :119) b :144 d : (c : violet a : yellow b : red))) d : (e : (e :140 a : (e : green c : green a :0 b :68 d :152 f : red) d : (blue 6) c :-29 h : green b : (violet 106 violet orange -38 175) g :54 f : (177 31 violet yellow) i :185) a : green d : (111 49 yellow blue orange (e : yellow a : orange d : violet j : blue c : red h :88 b :-1 g : red f : red i : (e :121 a :112 d :195 j :103 c :94 h : red b :12 g :8 f :22 i : orange)) 64 (violet (blue 76 blue red red) (violet blue orange yellow 144) 185 (a :66 b : orange) 199 green green) 14) c : (e : green a : orange d : (c : (-23 189 -11 green violet 178 -4 blue 68 violet) a : (orange red) b : yellow d : yellow) j : (c :-33 a : blue b : violet) c :107 h : (e :-16 a :174 d : (e : orange c : green a :-28 b :-30 d :73) j : yellow c : orange h : orange b : (blue violet -4 76 red red) g :59 f :12 i :199) b : (a : green b :54) g : violet f :174 i : (orange 41 85 yellow green 25 red -20 156 143)) h : yellow b : red g :90 f :-37 i : (a :146 b : violet)) j : blue c : (1 (yellow -11 green 66 red 90 green yellow 3 (e :-34 a :194 d : green c : (-11 yellow) h :59 b : yellow g : blue f :162 i : violet)) 81 158 170) h : blue b : green g : (violet (blue blue)) f : (-44 yellow (35 (122 red yellow (a : red b : violet) blue orange violet) violet (e :-48 a :6 d :-6 c :4 h : yellow b : blue g : red f : red)) ((e :-2 a :156 d : red j :69 c :0 h : violet b : orange g :61 f :102 i : (orange blue violet -1 137)) (a :183 b :89)) (a :167 b : orange) 193 95 (97 (66 154 -32 orange 121 (e :198 a : blue d :102 c : red h : green b :135 g : orange f :-49 i :151) 97 7 red) 195 blue 49 green 10)) i : (violet 1 (e : orange c :196 a : blue g : red b :190 d :87 f :128) blue 128 147)) d : (((a : green b :43) 169 -8 orange (a : (violet (red violet orange yellow -49 violet -25) violet 60 33 violet (yellow orange 31 144 red yellow 73 orange red green) (green -31 red) orange blue)) violet blue) 40 154 (a : (c : violet a :145 b :166 d : (blue (blue 125 185 yellow red 152 89 -18 blue 141) 26 2 35 orange 190))) 170 violet -31 ((151 orange green (blue 114 -5 yellow) blue green orange yellow 62 (c :22 a : green b : blue)) 17 (176) violet 129 67 (c : (c : red a :140 b :25) a : (blue green 163) b :30 d : (60 green red 126 (48 green) -26 (yellow green 150 red violet red violet 59 -12) 167 yellow)) yellow yellow) blue)) | d | : | (c : green a :52 b : (136 (c : (a : (197 (orange red 138 67 orange 172 2 orange) red)) a : violet b : (a : (e :172 c :171 a : yellow b :191 d : (e :171 a : red d : violet c : green h : yellow b : yellow g :73 f : yellow))) d : (86 -11 -5 (orange green 64 (blue 15 orange yellow violet 181 green blue) yellow yellow (e :27 c :156 a : blue g : violet b :38 d :51 f :23) orange violet) 10)) (55 (e :191 c : blue a : orange b : yellow d :109) blue (c :164 a : (198 -9 183 (e :14 a :176 d :117 c : violet h : violet b :-44 g : violet f : red i : orange) yellow 0) b :58 d :33) red (125 23 blue 149 ((blue -44 22 133 orange yellow yellow violet violet 131) violet -1 red 66 blue) green red red (-31 blue (orange orange yellow 44 green yellow green 160 violet) yellow (orange violet green violet 194 blue -27) green (e : violet a : red d :67 c :68 h : blue b : orange g : orange f : violet i : violet) yellow)) violet (59 158 (e : blue c : blue a : orange g :73 b :97 d : red f : orange)) (red (31 (95 72 orange yellow) blue 192 63) (197 green (e :112 a : violet d : blue c :-2 h : blue b : green g :124 f : blue) 177 green blue 162 107))) 43 ((e : red c : (e : (green -33 11 154 yellow -4) c : yellow a : (7 orange orange yellow 118 169 red blue) b : green d :114) a : (e : green a : green d :187 j : (e :106 c :-41 a : violet b :173 d :12) c : red h : violet b :-4 g : (c : violet a :-26 b :87 d :-33) f : green i :-46) b : green d :13 f : yellow)) (blue violet orange red (e : green a : (violet 140 (76 green 94 33 green 31 orange 53) violet yellow violet blue (blue 196 orange yellow orange -42 orange 171 -47 violet) green 110) d :31 c : orange h : (e :-45 a : green d : (violet) c : red h :105 b :130 g :-36 f : orange i : (e : red c :137 a :54 g : blue b : violet d :102 f :178)) b :-41 g : (e :6 a :-25 d :66 j : violet c :39 h :30 b :63 g :46 f :56 i : blue) f :6 i : violet) (84 175 orange (a : green) green 66 (e : red a : (a :178 b : yellow) d : yellow c : (red red 38 orange blue 136 red 137 red) h :163 b : (orange 84 red 178) g :65 f : blue)) (98 yellow (46 orange yellow yellow) blue 151 189 (yellow (e : orange a :27 d :45 c :48 h : green b :90 g :180 f :-43) yellow) blue) (a : green) blue (c :37 a : (e :59 c : (blue) a : yellow g :38 b : blue d : violet f : orange) b : orange d : violet)) (c :75 a : (e : (a :130) a :5 d :1 c :72 h : (e : red a :11 d :157 c :97 h :-24 b : red g :111 f :21) b : (e :145 a : red d : violet j : (-11 191 -43 blue orange 105 158) c : red h :143 b : (e : orange c : yellow a :-31 g :177 b : violet d : blue f : green) g : green f :48 i : (e :18 a :142 d : yellow c :116 h : violet b :135 g :37 f :36)) g :-26 f : (186 192 orange 117 -9 violet -19 55 green 167) i : green) b : yellow d : (a :138)))) | c | : | blue | h | : | ((19) orange ((e : (yellow 68 28 29 (e : red a : violet d : green c :143 h : red b : orange g :44 f :123 i : orange) 38 28 65 (e :-26 c : (red 132 red 124 yellow 115) a :170 g : yellow b : green d :-18 f : (c :1 a : red b :-1))) a : orange d :129 c :33 h : violet b : orange g : green f :-24) (violet -22) (64 -20 (e :46 a :76 d :97 c :-21 h :98 b : violet g : (e :-7 c : violet a :190 b : violet d :138 f : violet) f : (178 blue blue) i : red) (e : orange c : red a : (e : orange a : (green) d : (19 red) c :-32 h :-15 b : yellow g :116 f : blue i : orange) b :96 d : green f :176) ((104 99 yellow -13 red (c : blue a : red b :46 d :60) -13 9) -22 -26 133 (green (red 188 green green) 166 yellow (e : yellow c :197 a :65 b :83 d :-19 f : yellow) (157 violet blue yellow -30 violet -3) 21 (a :-15)) 43 (orange blue 88 yellow 103 31) orange -24)) (c : violet a : (a :26 b : yellow) b : (violet violet (e :102 a : red d :178 j :187 c : orange h : violet b :72 g :-37 f : violet i : orange) 44 114 yellow 85))) (e :150 c : green a : (e : (e : (e : (e : orange a :48 d :41 j : orange c : orange h :30 b : yellow g :41 f :-40 i :8) c :199 a :32 b : yellow d :-28) a :46 d : (50 red violet 63 red 56 -18 orange violet red) c : blue h : (e : green c :172 a : green b :-30 d :22 f : yellow) b : orange g :65 f : yellow i :174) a : green d : (196 (e : (e :176 a : violet d : orange j :-37 c :19 h :31 b :155 g : red f :106 i : green) c : red a :64 b : orange d :179 f :8) yellow 103 violet (e :142 a :111 d : yellow c : violet h : red b :148 g :29 f :179 i : green) -26) c :-19 h : (red 134 green green 105) b : orange g :126 f :76 i :158) b :55 d : green) (((61) ((orange red) (151 yellow 127 yellow 185 yellow (e :105 c : yellow a :198 b : orange d : blue f :89) 140 (e : violet a :-15 d :169 j :3 c : yellow h :74 b :-41 g :29 f :112 i :18))) 101 (e : (45 green yellow blue violet (violet yellow 159 0 orange yellow 100 green blue 49) (5 -37) blue orange) c :88 a : blue b :-32 d :23) 77 (e : (yellow 119 197 (orange -28 yellow 179 130 74 -10 115 violet 79) orange 63 -15 17 blue violet) c : (e :164 a :83 d : yellow c :119 h : yellow b :148 g :-22 f : (-17 17 violet green red) i :67) a : (e :54 a :147 d : yellow c :86 h :113 b : yellow g :77 f :101 i : blue) g : orange b : (193 orange orange red 39 44 43 -29) d : violet f :191)) orange (red violet yellow (red 54 (e : (a :41 b : violet) c : red a : (e : red a : yellow d : green j :-33 c :96 h :137 b : yellow g :30 f : green i : blue) b :181 d : violet f : green) 49 yellow) orange yellow (e : orange c : (46 orange (blue green blue yellow yellow violet orange orange 1) yellow 155 194 yellow 149) a : green b :-3 d :153 f : (-21 -26 -25 blue red 108 169 (green 100 43) 51 -9))) 71 ((((a : violet b :27) 148 109 (blue 60 47 violet yellow -47 violet) red (e :97 c :-21 a : yellow b : green d :126) yellow 85 89) (a : (red orange violet blue blue blue 128 blue)) (e :-48 c : (c :90 a : orange b : yellow) a : yellow b : red d :172) yellow (a : orange) ((e : yellow a :40 d :-9 j : violet c :153 h :79 b : violet g :178 f :2 i : yellow) green -29) red -9 (9 (a :39 b : green) 5 violet 26 (e :167 c : blue a : yellow b :90 d :33) green 88 12 blue)) red (c : (e : yellow a :-44 d :62 j :-19 c :96 h : green b :-12 g : green f : red i :134) a :22 b :24 d :33) red violet (e :181 c :64 a : violet g : green b : yellow d : violet f :101) green (132 93 (-6 (-3 28 red) -21 red violet (a :180) red blue -15) (e :171 a : (e : green c :49 a : orange g :22 b : violet d : orange f : orange) d : red c :113 h : green b : (30 blue) g : (a :139 b :47) f : red i : red) violet 158 green 5 -1) 19) red) (e : (c : (orange 93 162 green violet (green 178) (a : green b : (e :-12 a :-16 d :144 c : red h : violet b :43 g : green f :-42))) a : blue b : blue d : (e : (orange red (c :-19 a : green b :93) yellow green orange orange red green) a : green d : (e : yellow a :2 d : violet j : green c : blue h :19 b : violet g : blue f : (157 green 109 59 red 74 red blue green) i : orange) j : yellow c :166 h : yellow b : yellow g : (violet 138 (violet 141 green)) f :28 i : (e :52 c : yellow a : green b :5 d : (e :153 a : yellow d :191 j : green c : green h :124 b : green g :181 f :134 i : yellow) f :193))) c : violet a : (a : (a : green) b : (132)) b : ((e :11 a : green d : (e : (e :119 a : violet d : red c : red h : violet b :-6 g : blue f : orange i : orange) a :183 d : (-36 yellow) c : red h :71 b : yellow g :2 f : orange) c : green h : yellow b :29 g : green f : blue i : (e : yellow a :-24 d : (55 125 193 70 60 190 199) c : green h : (49 yellow yellow 74 red 163) b :198 g :50 f : blue i :70)) orange) d : blue) (c : (e :-20 a :8 d : (orange 157 152 green 46 green 7 89 violet (-22 -49 81 127)) c :35 h : (blue yellow orange 94 orange yellow) b : red g : (a : green b : (yellow orange 198)) f : violet i :17) a :-48 b : blue)) | b | : | ((149 ((e : blue c :-30 a : violet g : violet b : yellow d :178 f :-4)) orange 131 yellow (a : red b : violet) blue) (11) (e : (35 118 (e :39 a : yellow d : (119 orange 120 -43) j : violet c : orange h : blue b :-32 g : ((e : green c :106 a :144 b :147 d : green) violet orange) f :116 i : orange) 112 yellow) a : (e :19 a : orange d :61 c : red h : blue b :164 g : (c : red a :-10 b : (e : (e : green c :82 a :103 g :67 b :153 d : violet f :22) c :-22 a :101 b :71 d : (a :152 b : green) f : orange)) f :157 i : (e : green a : orange d :-8 j : (159 73 182 red green) c :13 h : blue b : yellow g :186 f : orange i :81)) d :13 c : (186 (yellow (violet violet) green -28) 54 (blue (119 red 119 91 181) 117) -15 190 (c : red a :13 b : ((c : green a :70 b :8 d :175) orange green yellow green)) blue -43) h : (e : ((a : green) 88 red violet 10) a : (a : orange b : (62 yellow green)) d :151 c : red h : orange b :126 g : (a : orange) f : orange i :46) b : ((-2 violet violet red (a :192) green 122) (orange red (c :62 a :52 b :-45) (e : (a : violet b :-45) a : red d : orange c : yellow h : (e :67 c :-27 a :116 b : violet d : green f :-18) b : yellow g : blue f : blue) 27 (c :37 a :-39 b : blue)) 107 yellow (blue red 143) blue (e : orange a : (yellow (blue 8 149 141 red -28 red) 18) d :29 c : violet h :-21 b : ((e :66 c : green a : blue b :-29 d : orange f : violet) blue -21) g : green f :112) 73) g : (red (a : (e :93 a :13 d : violet c :175 h :158 b :9 g :194 f :-10) b : blue)) f :130)) | g | : | ((red orange orange 172 154 (e : (a : blue b : (a : yellow b :53)) c :-11 a : orange g : yellow b : (e : (e :94 a :123 d :184 j :-4 c :193 h :152 b : blue g : red f :101 i :178) c : blue a :178 b :154 d : (103 109 190 yellow 29 red orange yellow 79 green) f : orange) d : (e :25 a : (a : blue) d : green c : orange h : (e :144 c : (red blue violet 15 green 109 72) a : yellow b : orange d : yellow) b :151 g : (141 orange 134 blue blue 4 21 blue green) f :96) f : blue) blue) 80 186 ((194 violet 70 green) (a : orange b : green) ((e : orange a :179 d : (e :164 c :-14 a : blue g : yellow b : violet d :76 f :-33) c : green h : violet b : orange g : blue f : orange i : green) blue)) orange yellow 66) | f | : | (a : (violet) b :87) | i | : | (e : (c : ((e : red a :19 d :100 j : red c : red h : red b : yellow g :-41 f :10 i : blue) 42 92 violet red (149 green 91 blue) -33 (green 73 129) 110 (e :168 c :153 a :-30 b : yellow d : (192 (c : blue a : blue b :-16 d :-18) (e : red c : yellow a : violet b :31 d : green) blue) f : (c :9 a : yellow b :-16 d :128))) a : (((green violet 136 59 orange 173 116 113 yellow) green (e : blue c : green a : blue g : red b :98 d :-25 f :21) orange 184) 4 yellow red -24 (c : orange a :15 b : (e :109 c :179 a :61 b : orange d :190 f :9))) b : ((92 148 (e : blue a :0 d :108 c :197 h : red b : orange g :-22 f :105 i : blue) blue) -7 149)) a : (e : (a : (e : green a : (violet 172) d :-10 c :42 h : blue b :80 g : (e : red c : orange a : yellow g :87 b : (e :31 c :129 a : orange b :43 d : blue) d : blue f :81) f : violet) b : orange) a :182 d : (c : (a :154) a : blue b : (e :31 a : (yellow blue red (a : orange) red 62 39 red (green orange yellow 47 orange 55 blue)) d : (72 187 red orange 59 yellow violet green) j : orange c : yellow h :185 b : (e : blue c : violet a : (orange 7 180 150 46 yellow 176 orange) b :148 d : blue) g : blue f : yellow i :102)) c : red h :-9 b :14 g : (a : green b : (c :-18 a :81 b :104)) f : (((e :-33 c : green a : orange b : blue d : blue) yellow 141 (42 197) (-12 61 (e : violet a : violet d : green c :-21 h :-5 b : orange g :39 f : green) blue) 31 ((101 blue -14 red 88) 58 (red blue violet 34) -14 yellow 98 106 91 131) yellow (151 red green (e : violet c : green a :49 g :155 b :96 d : blue f : orange) -18 184 (c : blue a :1 b :162) (e :115 a :94 d :97 j :-34 c : blue h :115 b : red g : orange f :149 i :105)) 38) (c : (e : blue c :90 a : yellow b :142 d : violet) a :-38 b : violet)) i :189) d : orange c : ((103 8 green 13 23 violet 55) ((e :79 c :74 a : (e : violet a : (c : red a : violet b :168) d :142 j : blue c :173 h : yellow b : green g : blue f : blue i : blue) g : ((c : violet a :82 b :90) -24 (a : orange) yellow (126 53 153 6) 52 137 violet 181) b :105 d :166 f : (e : blue c :-35 a : blue b :188 d :-14 f :63)) (e :95 a : green d : yellow j : red c :81 h :107 b :-46 g :162 f : green i : red) ((e : violet a :150 d :126 c :10 h : (e : green a : orange d :19 c : green h : green b :79 g : red f : yellow i : blue) b : (a :25 b :147) g :180 f :126) (e :-48 a :192 d :-45 c :25 h : green b : (c :165 a : orange b : red d : blue) g : green f :-24) 95 (e : blue a : violet d : yellow j : blue c :44 h : (blue green red 142 red) b : (-43 violet green 53) g :33 f : orange i :196) orange green 43 (113 violet orange 129 (c :6 a : violet b : green d : green) 20)) green)) h : (a :-11) b : (e : violet c :174 a : violet g : ((e :105 a : (c :-5 a :177 b :63) d :-41 c :80 h : (110 109 113 blue) b :-28 g : red f :129) (green (108) (a :4) (182 96 29 (181 14 yellow violet) 13 (e :132 a :115 d : red c : violet h : violet b : violet g : green f : green) (e : orange a : yellow d : blue j : red c :137 h : violet b : green g :-22 f : yellow i :-12) green yellow 57) -44 (a :88 b :-3) 22 (c : red a : violet b :-21)) ((14 orange)) -36 128 yellow (-47 (-7 36 177) blue blue (yellow violet -23 violet -40 orange (e :129 a :21 d :51 j : violet c : red h :15 b :174 g :191 f :101 i :105)) 23 (-47 (133 66 violet) 177 violet yellow green 159 yellow)) (e : ((a : orange) green 69 orange 43 violet violet 192 140 green) a :62 d : violet j : (c : violet a :-25 b : violet) c :120 h : red b : (a :13) g : green f :124 i :33) ((19 176 174 orange violet violet 105 128 red) (a :10 b : red) (orange 37 187 green 176) blue red (153 yellow violet 137 orange blue (70 red 174 blue green yellow 99 red) violet violet red))) b : ((c :133 a : orange b :98 d : (c : red a :-9 b :103)) blue (155 yellow) ((yellow -8 (e : blue c :59 a :71 g : orange b :88 d : orange f :17) blue -37) (e :82 c : violet a :99 b :81 d : yellow f :161) blue (c :-7 a :154 b : violet) -9 -13 53 (e : violet a : yellow d :-26 c :179 h : green b : red g :-24 f :133 i :-36))) d : (e : (9 (49) 28 red (c :23 a :157 b : (c : violet a : green b :-11 d : green) d :139) orange green 93 44 (-19)) a :-6 d :7 c : (e : (c : violet a :-21 b :12) c : (green (-23 -40 157) red (orange blue) violet red 85 violet yellow 150) a :162 g : yellow b : green d : (green yellow 181 green -2 (e : red a : yellow d :129 c :-34 h :129 b :152 g : yellow f :80 i : red) green red -9 red) f :6) h : (e :136 a : violet d : (violet -15 129 green 5 green (-28 156 141 blue 22 green 34) green) c :149 h : (violet) b :149 g : green f :149) b : (e :123 a : red d : (e :0 c : green a : violet b : yellow d : red f : green) c : (e : (e : yellow c : red a : red b : violet d : yellow) a : yellow d : (e :-39 a :-11 d :63 c :179 h :4 b :44 g : orange f : violet i : yellow) c :-43 h : green b : violet g : blue f : yellow i :124) h :48 b :129 g : (orange 147 174 blue green 115) f :172 i :-36) g : red f :30 i : violet) f : red) g : (e : (e : ((126 orange 196 orange red (e :23 a : yellow d :128 c :12 h :-49 b : green g : yellow f :41 i :45) red violet)) c : ((red 103 (e :69 a : violet d : yellow c : green h : red b :133 g :25 f : violet)) 88 green red -29 red) a :37 b : green d : (e : orange c : (e : (e :109 c :144 a : yellow b :70 d :83) c :-3 a : green b : yellow d :146) a :86 b :-1 d : (a :68))) c : (c : (155 18 blue -16 orange -36 49 red (yellow 136 140 -10 11 violet red 134 156 violet)) a :64 b : (e : violet c :193 a :101 b : (green) d :182 f :86) d : (198)) a : yellow g : violet b :1 d :-27 f : orange) f : (e :20 c : (e :155 c : (c : (181 (e :-32 a : orange d : orange j : yellow c :66 h :-39 b : violet g : violet f : red i :23) 4 blue 70 violet blue 141 (a : yellow b :184) violet) a :160 b :158 d :197) a :138 g : (48) b :26 d :11 f : (c : yellow a :179 b : red d :90)) a :148 g : yellow b : (((a : (yellow)) yellow 19 green 39) (c : (a : blue) a : (e :41 c :191 a :173 b : green d :-14 f :19) b : (a : (orange 4 48) b :193) d : green) (yellow (e : orange a : orange d : blue c :-39 h :28 b : yellow g : red f : orange i : (116 red 173 76 24 -1 green 101 -10)) 70 (c : violet a :44 b : violet d :36) 128 (c : yellow a : red b : (yellow -10)) -10 6)) d : violet f : (e : violet c :5 a : violet g :173 b :100 d : (violet 194 (e : (blue 181 violet yellow blue -7 137 43 112) c :-19 a :120 b : green d :165) -1 195 green 104) f :128))) |

** day12-common (test)
   #+name: test_set_day12
   #+begin_src python :results value :cache yes
   #
   data="1"
   return data
   #+end_src

   #+name: day12-com
   #+begin_src python :results output :var data=test_set_day12

   #+end_src

** day12a
   #+name: day12a
   #+begin_src python :results output :var data=init_day12 :noweb yes
   <<day12-com>>
   #+end_src

** day12b
   #+name: day12b
   #+begin_src python :results output :var data=init_day12 :noweb yes
   <<day12-com>>
   #+end_src
* END
  # Local Variables:
  # eval: (progn (org-babel-goto-named-src-block "startup") (org-babel-execute-src-block) (outline-hide-sublevels 1))
  # End:
